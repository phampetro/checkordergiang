import os
import sys
import copy
import shutil
import openpyxl
import warnings
from pathlib import Path
from datetime import datetime

# T·∫Øt warning openpyxl v·ªÅ default style
warnings.filterwarnings("ignore", category=UserWarning, module="openpyxl")

class ExcelProcessor:
    def __init__(self):
        self.base_path = Path(__file__).parent
        self.output_dir = self.base_path / "output"
        self.create_summary = False  # T·∫Øt t·∫°o file t·ªïng h·ª£p m·∫∑c ƒë·ªãnh
        
    def get_daily_directory(self):
        """
        L·∫•y th∆∞ m·ª•c output theo ng√†y hi·ªán t·∫°i (format: DDMMYYYY)
        """
        today = datetime.now().strftime("%d%m%Y")
        daily_dir = self.output_dir / today
        
        if daily_dir.exists():
            return daily_dir
        else:
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c: {daily_dir}")
            return None
    
    def process_excel_files(self):
        """
        X·ª≠ l√Ω t·∫•t c·∫£ file Excel trong th∆∞ m·ª•c ng√†y hi·ªán t·∫°i
        """
        daily_dir = self.get_daily_directory()
        if not daily_dir:
            return False
        
        # T√¨m t·∫•t c·∫£ file Excel (b·ªè qua file temp b·∫Øt ƒë·∫ßu b·∫±ng ~$)
        excel_files = [f for f in daily_dir.glob("*.xlsx") if not f.name.startswith("~$") and f.name != "K·∫øt qu·∫£.xlsx"]
        if not excel_files:
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y file Excel n√†o trong: {daily_dir}")
            return False
        
        success_count = 0
        processed_files = []  # Danh s√°ch file ƒë√£ x·ª≠ l√Ω th√†nh c√¥ng
        
        for i, excel_file in enumerate(excel_files, 1):
            print(f"üîÑ X·ª≠ l√Ω file {i}/{len(excel_files)}: {excel_file.name}")
            
            if self.process_single_excel(excel_file):
                success_count += 1
                processed_files.append(excel_file)
            else:
                print(f"‚ùå Th·∫•t b·∫°i: {excel_file.name}")
        
        print(f"üìä K·∫øt qu·∫£: {success_count}/{len(excel_files)} file ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng")
        
        # T·∫°o file t·ªïng h·ª£p n·∫øu ƒë∆∞·ª£c b·∫≠t v√† c√≥ file ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng
        if self.create_summary and processed_files:
            print("üìã ƒêang t·∫°o file t·ªïng h·ª£p...")
            self.create_summary_workbook(processed_files)
        
        return success_count > 0
    
    def process_single_excel(self, excel_file):
        """
        X·ª≠ l√Ω m·ªôt file Excel theo t·ª´ng b∆∞·ªõc tu·∫ßn t·ª±:
        5 d√≤ng ƒë·∫ßu ti√™u ƒë·ªÅ
        B1: ·∫®n t·ª´ d√≤ng 1 ƒë·∫øn d√≤ng 3
        B2: ·∫®n d√≤ng c√≥ c·ªôt A r·ªóng
        B3: ·∫®n d√≤ng c√≥ c·ªôt B r·ªóng, C r·ªóng V√Ä F KH√ÅC r·ªóng
        B4: ·∫®n d√≤ng c√≥ c·ªôt D r·ªóng AND c·ªôt C <> ""
        B4: X√≥a d·ªØ li·ªáu c·ªßa c√°c d√≤ng c√≥ c·ªôt C r·ªóng, x√≥a t·ª´ K tr·ªü ƒëi
        B5: ·∫®n c√°c d√≤ng K c√≥ ch·ª©a n·ªôi dung "NPP b√°n"
        B6: ·∫®n d√≤ng c√≥ c·ªôt Q > 0 (gi·ªØ l·∫°i d√≤ng r·ªóng v√† 0)
        B7: Ki·ªÉm tra c·ªôt Q n·∫øu c√≥ 2 d√≤ng r·ªóng li√™n ti·∫øp th√¨ ·∫©n d√≤ng th·ª© 2
        B8: ·∫®n c·ªôt S tr·ªü ƒëi, c·ªôt A ƒë·∫øn F, c·ªôt M v√† N
        B9: C·ªë ƒë·ªãnh xem ƒë∆∞·ª£c ti√™u ƒë·ªÅ
        B10: T·ªëi ∆∞u c·ªôt I, K (b·ªè xu·ªëng d√≤ng + t·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh ƒë·ªô r·ªông)
        B11: T·∫°o file t·ªïng h·ª£p K·∫øt qu·∫£.xlsx (t√πy ch·ªçn - m·∫∑c ƒë·ªãnh t·∫Øt)
        """
        try:
            # M·ªü file Excel
            wb = openpyxl.load_workbook(excel_file)
            ws = wb.active
            
            row_count = ws.max_row
            col_count = ws.max_column
            
            # B1: ·∫®n t·ª´ d√≤ng 1 ƒë·∫øn d√≤ng 3
            for row_num in range(1, 4):  # D√≤ng 1, 2, 3
                ws.row_dimensions[row_num].hidden = True
            
            # B2: ·∫®n d√≤ng c√≥ c·ªôt A r·ªóng (t·ª´ d√≤ng 6 tr·ªü ƒëi, b·ªè qua ti√™u ƒë·ªÅ d√≤ng 4-5)
            hidden_count_a = 0
            for row_num in range(6, row_count + 1):
                cell_a = ws.cell(row_num, 1)
                if cell_a.value is None or str(cell_a.value).strip() == "":
                    ws.row_dimensions[row_num].hidden = True
                    hidden_count_a += 1
            
            # B3: ·∫®n d√≤ng c√≥ c·ªôt B r·ªóng, C r·ªóng V√Ä F KH√ÅC r·ªóng (ch·ªâ x√©t d√≤ng ch∆∞a b·ªã ·∫©n)
            hidden_count_b = 0
            for row_num in range(6, row_count + 1):
                if not ws.row_dimensions[row_num].hidden:
                    cell_b = ws.cell(row_num, 2) # C·ªôt B
                    cell_c = ws.cell(row_num, 3) # C·ªôt C
                    cell_f = ws.cell(row_num, 6) # C·ªôt F
                    
                    b_is_empty = cell_b.value is None or str(cell_b.value).strip() == ""
                    c_is_empty = cell_c.value is None or str(cell_c.value).strip() == ""
                    f_is_not_empty = cell_f.value is not None and str(cell_f.value).strip() != ""
                    
                    if b_is_empty and c_is_empty and f_is_not_empty:
                        ws.row_dimensions[row_num].hidden = True
                        hidden_count_b += 1
            
            # B4: ·∫®n d√≤ng c√≥ c·ªôt D r·ªóng AND c·ªôt C <> ""
            hidden_count_d = 0
            for row_num in range(6, row_count + 1):
                if not ws.row_dimensions[row_num].hidden:
                    cell_c = ws.cell(row_num, 3)
                    cell_d = ws.cell(row_num, 4)
                    
                    c_not_empty = (cell_c.value is not None and str(cell_c.value).strip() != "")
                    d_empty = (cell_d.value is None or str(cell_d.value).strip() == "")
                    
                    if d_empty and c_not_empty:
                        ws.row_dimensions[row_num].hidden = True
                        hidden_count_d += 1
            
            # B4: X√≥a d·ªØ li·ªáu c·ªßa c√°c d√≤ng c√≥ c·ªôt C r·ªóng, x√≥a t·ª´ K tr·ªü ƒëi
            cleared_count_c = 0
            for row_num in range(6, row_count + 1):
                cell_c = ws.cell(row_num, 3)
                if cell_c.value is None or str(cell_c.value).strip() == "":
                    # X√≥a d·ªØ li·ªáu t·ª´ c·ªôt K (11) tr·ªü ƒëi
                    if col_count >= 11:
                        for col_num in range(11, col_count + 1):
                            try:
                                ws.cell(row_num, col_num).value = None
                            except AttributeError:
                                pass  # B·ªè qua MergedCell
                        cleared_count_c += 1
            
            # B5: ·∫®n c√°c d√≤ng ·ªü c·ªôt K ch·ª©a c√°c t·ª´ kh√≥a ch·ªâ ƒë·ªãnh (NPP B√°n, NPP t·ª± b√°n, TMDT...)
            hidden_count_k = 0
            keywords_to_hide = ["NPP B√°n", "NPP t·ª± b√°n", "TMDT Lazada", "TMDT Sendo", "TMDT Tiki", "TT B√°n"]
            for row_num in range(6, row_count + 1):
                if not ws.row_dimensions[row_num].hidden:
                    cell_k = ws.cell(row_num, 11)  # C·ªôt K
                    if cell_k.value is not None:
                        cell_value_str = str(cell_k.value)
                        if any(keyword in cell_value_str for keyword in keywords_to_hide):
                            ws.row_dimensions[row_num].hidden = True
                            hidden_count_k += 1
            
            # B6: ·∫®n d√≤ng c√≥ c·ªôt Q > 0 (gi·ªØ l·∫°i d√≤ng r·ªóng v√† 0)
            hidden_count_q = 0
            for row_num in range(6, row_count + 1):
                if not ws.row_dimensions[row_num].hidden:
                    cell_q = ws.cell(row_num, 17)  # C·ªôt Q
                    if cell_q.value is not None:
                        try:
                            q_value = float(cell_q.value)
                            if q_value > 0:
                                ws.row_dimensions[row_num].hidden = True
                                hidden_count_q += 1
                        except (ValueError, TypeError):
                            pass
            
            # B7: Ki·ªÉm tra c·ªôt Q n·∫øu c√≥ 2 d√≤ng r·ªóng li√™n ti·∫øp th√¨ ·∫©n d√≤ng th·ª© 2
            hidden_count_q2 = 0
            prev_row_q_empty = False
            for row_num in range(6, row_count + 1):
                if not ws.row_dimensions[row_num].hidden:
                    cell_q = ws.cell(row_num, 17)  # C·ªôt Q
                    current_row_q_empty = (cell_q.value is None or str(cell_q.value).strip() == "")
                    
                    if prev_row_q_empty and current_row_q_empty:
                        ws.row_dimensions[row_num].hidden = True
                        hidden_count_q2 += 1
                    
                    prev_row_q_empty = current_row_q_empty
            
            # B8: ·∫®n c·ªôt S tr·ªü ƒëi, c·ªôt A ƒë·∫øn F, c·ªôt M v√† N
            hidden_cols = self.hide_unwanted_columns(ws)
            
            # B9: C·ªë ƒë·ªãnh xem ƒë∆∞·ª£c ti√™u ƒë·ªÅ
            ws.freeze_panes = "A6"  # C·ªë ƒë·ªãnh d√≤ng 4-5 (ti√™u ƒë·ªÅ)
            
            # B10: T·ªëi ∆∞u c·ªôt I, K (b·ªè xu·ªëng d√≤ng + t·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh ƒë·ªô r·ªông)
            self.optimize_columns_i_k(ws)
            
            # L∆∞u file
            wb.save(excel_file)
            wb.close()
            
            return True
            
        except Exception as e:
            print(f"‚ùå L·ªói x·ª≠ l√Ω: {str(e)}")
            return False
    
    def hide_unwanted_columns(self, ws):
        """
        ·∫®n c·ªôt A ƒë·∫øn F, c·ªôt H, J, L, M, N v√† t·ª´ c·ªôt S tr·ªü ƒëi.
        Tr·∫£ v·ªÅ s·ªë c·ªôt ƒë√£ ·∫©n.
        """
        try:
            total_cols = ws.max_column
            hidden_count = 0
            
            # ·∫®n c·ªôt A ƒë·∫øn F (c·ªôt 1 ƒë·∫øn 6)
            for col_num in range(1, 7):  # C·ªôt A=1 ƒë·∫øn F=6
                if col_num <= total_cols:
                    ws.column_dimensions[ws.cell(1, col_num).column_letter].hidden = True
                    hidden_count += 1
            
            # ·∫®n c·ªôt H (c·ªôt 8)
            if total_cols >= 8:
                ws.column_dimensions[ws.cell(1, 8).column_letter].hidden = True
                hidden_count += 1
            
            # ·∫®n c·ªôt J (c·ªôt 10)
            if total_cols >= 10:
                ws.column_dimensions[ws.cell(1, 10).column_letter].hidden = True
                hidden_count += 1
            
            # ·∫®n c·ªôt L (c·ªôt 12)
            if total_cols >= 12:
                ws.column_dimensions[ws.cell(1, 12).column_letter].hidden = True
                hidden_count += 1
            
            # ·∫®n c·ªôt M (c·ªôt 13)
            if total_cols >= 13:
                ws.column_dimensions[ws.cell(1, 13).column_letter].hidden = True
                hidden_count += 1
            
            # ·∫®n c·ªôt N (c·ªôt 14)
            if total_cols >= 14:
                ws.column_dimensions[ws.cell(1, 14).column_letter].hidden = True
                hidden_count += 1
            
            # ·∫®n t·ª´ c·ªôt S tr·ªü ƒëi (c·ªôt 19 tr·ªü ƒëi)
            for col_num in range(19, total_cols + 1):  # T·ª´ S=19 ƒë·∫øn cu·ªëi
                ws.column_dimensions[ws.cell(1, col_num).column_letter].hidden = True
                hidden_count += 1
            
            return hidden_count
            
        except Exception as e:
            print(f"‚ùå L·ªói ·∫©n c·ªôt: {str(e)}")
            return 0
    
    def optimize_columns_i_k(self, ws):
        """
        T·ªëi ∆∞u c·ªôt I, K (m√¥ ph·ªèng double-click auto-fit Excel):
        1. B·ªè thu·ªôc t√≠nh xu·ªëng d√≤ng (word wrap)
        2. T·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh ƒë·ªô r·ªông c·ªôt v·ª´a ƒë·ªß v·ªõi d·ªØ li·ªáu (auto-fit)
        Ch·ªâ t√°c ƒë·ªông l√™n c·ªôt I v√† K, kh√¥ng ƒë·ªông v√†o c·ªôt G
        """
        try:
            from openpyxl.styles import Alignment
            
            # Ch·ªâ x·ª≠ l√Ω c·ªôt I=9, K=11 (b·ªè c·ªôt G=7)
            target_columns = [9, 11]  # I, K
            
            for col_num in target_columns:
                col_letter = ws.cell(1, col_num).column_letter
                
                # 1. B·ªè thu·ªôc t√≠nh xu·ªëng d√≤ng cho t·∫•t c·∫£ cell trong c·ªôt
                for row in ws.iter_rows(min_col=col_num, max_col=col_num):
                    for cell in row:
                        if cell.alignment:
                            # Gi·ªØ nguy√™n c√°c thu·ªôc t√≠nh kh√°c, ch·ªâ t·∫Øt wrap_text
                            cell.alignment = Alignment(
                                horizontal=cell.alignment.horizontal,
                                vertical=cell.alignment.vertical,
                                text_rotation=cell.alignment.text_rotation,
                                wrap_text=False,  # T·∫Øt xu·ªëng d√≤ng
                                shrink_to_fit=cell.alignment.shrink_to_fit,
                                indent=cell.alignment.indent
                            )
                        else:
                            # N·∫øu ch∆∞a c√≥ alignment, t·∫°o m·ªõi v·ªõi wrap_text=False
                            cell.alignment = Alignment(wrap_text=False)
                
                # 2. T·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh ƒë·ªô r·ªông c·ªôt (m√¥ ph·ªèng double-click auto-fit)
                max_length = 0
                for row in ws.iter_rows(min_col=col_num, max_col=col_num):
                    for cell in row:
                        if cell.value:
                            # T√≠nh ƒë·ªô d√†i text, x·ª≠ l√Ω c·∫£ s·ªë v√† text
                            cell_text = str(cell.value)
                            # ∆Ø·ªõc l∆∞·ª£ng ƒë·ªô r·ªông: text th∆∞·ªùng + s·ªë c√≥ th·ªÉ c√≥ ƒë·ªãnh d·∫°ng
                            cell_length = len(cell_text)
                            
                            # N·∫øu l√† s·ªë, c√≥ th·ªÉ c·∫ßn th√™m kh√¥ng gian cho ƒë·ªãnh d·∫°ng
                            try:
                                float(cell.value)
                                # N·∫øu l√† s·ªë, th√™m 1-2 k√Ω t·ª± cho ƒë·ªãnh d·∫°ng
                                cell_length = max(cell_length, 8)
                            except (ValueError, TypeError):
                                pass
                            
                            if cell_length > max_length:
                                max_length = cell_length
                
                # Auto-fit: ƒë·ªô r·ªông = max_length + 1 (t∆∞∆°ng t·ª± double-click Excel)
                # Gi·ªõi h·∫°n t·ªëi thi·ªÉu 6, t·ªëi ƒëa 30 ƒë·ªÉ tr√°nh c·ªôt qu√° r·ªông
                auto_fit_width = min(max(max_length + 1, 6), 30)
                ws.column_dimensions[col_letter].width = auto_fit_width
                
        except Exception as e:
            print(f"‚ùå L·ªói t·ªëi ∆∞u c·ªôt I, K: {str(e)}")
    
    def list_files_in_daily_directory(self):
        """
        Li·ªát k√™ c√°c file trong th∆∞ m·ª•c ng√†y hi·ªán t·∫°i
        """
        daily_dir = self.get_daily_directory()
        if not daily_dir:
            return
        
        excel_files = list(daily_dir.glob("*.xlsx"))
        
        print(f"üìÅ Th∆∞ m·ª•c: {daily_dir}")
        print(f"üìÑ S·ªë file Excel: {len(excel_files)}")
        print("‚îÄ" * 50)
        
        for i, excel_file in enumerate(excel_files, 1):
            file_size = excel_file.stat().st_size
            print(f"{i:2}. {excel_file.name} ({file_size:,} bytes)")
        
        if not excel_files:
            print("   (Kh√¥ng c√≥ file Excel n√†o)")
    
    def create_summary_workbook(self, processed_files):
        """
        T·∫°o file K·∫øt qu·∫£.xlsx t·ªïng h·ª£p t·∫•t c·∫£ c√°c file ƒë√£ x·ª≠ l√Ω
        M·ªói sheet c√≥ t√™n theo t√™n file g·ªëc (copy tr·ª±c ti·∫øp file ƒë√£ x·ª≠ l√Ω)
        """
        try:
            daily_dir = self.get_daily_directory()
            if not daily_dir:
                return False
            
            summary_file = daily_dir / "K·∫øt qu·∫£.xlsx"
            
            if len(processed_files) == 1:
                # N·∫øu ch·ªâ c√≥ 1 file, copy tr·ª±c ti·∫øp v√† ƒë·ªïi t√™n
                source_file = processed_files[0]
                import shutil
                shutil.copy2(source_file, summary_file)
                
                # M·ªü v√† ƒë·ªïi t√™n sheet
                wb = openpyxl.load_workbook(summary_file)
                ws = wb.active
                sheet_name = source_file.stem
                if len(sheet_name) > 31:
                    sheet_name = sheet_name[:31]
                ws.title = sheet_name
                wb.save(summary_file)
                wb.close()
                
                print(f"üìã ƒê√£ t·∫°o file t·ªïng h·ª£p: {summary_file.name} (1 sheet)")
                return True
            
            else:
                # N·∫øu c√≥ nhi·ªÅu file, merge v√†o 1 workbook
                from openpyxl import Workbook
                summary_wb = Workbook()
                
                # X√≥a sheet m·∫∑c ƒë·ªãnh
                default_sheet = summary_wb.active
                summary_wb.remove(default_sheet)
                
                copied_count = 0
                for source_file in processed_files:
                    try:
                        # M·ªü file ngu·ªìn
                        source_wb = openpyxl.load_workbook(source_file)
                        source_ws = source_wb.active
                        
                        # T·∫°o t√™n sheet t·ª´ t√™n file
                        sheet_name = source_file.stem
                        if len(sheet_name) > 31:
                            sheet_name = sheet_name[:31]
                        
                        # T·∫°o sheet m·ªõi v√† copy th·ªß c√¥ng (c√°ch duy nh·∫•t ƒë·ªÉ gi·ªØ format)
                        target_ws = summary_wb.create_sheet(title=sheet_name)
                        
                        # Copy t·∫•t c·∫£ cells v·ªõi format
                        for row in source_ws.iter_rows():
                            for cell in row:
                                target_cell = target_ws.cell(row=cell.row, column=cell.column)
                                target_cell.value = cell.value
                                
                                # Copy style
                                if cell.has_style:
                                    target_cell.font = copy.copy(cell.font)
                                    target_cell.border = copy.copy(cell.border) 
                                    target_cell.fill = copy.copy(cell.fill)
                                    target_cell.number_format = cell.number_format
                                    target_cell.alignment = copy.copy(cell.alignment)
                        
                        # Copy dimensions v√† properties
                        for col_letter, dimension in source_ws.column_dimensions.items():
                            target_ws.column_dimensions[col_letter].width = dimension.width
                            target_ws.column_dimensions[col_letter].hidden = dimension.hidden
                        
                        for row_num, dimension in source_ws.row_dimensions.items():
                            target_ws.row_dimensions[row_num].height = dimension.height
                            target_ws.row_dimensions[row_num].hidden = dimension.hidden
                        
                        # Copy freeze panes
                        if source_ws.freeze_panes:
                            target_ws.freeze_panes = source_ws.freeze_panes
                        
                        source_wb.close()
                        copied_count += 1
                        
                    except Exception as e:
                        print(f"   ‚ö†Ô∏è Kh√¥ng th·ªÉ copy {source_file.name}: {str(e)}")
                        continue
                
                # L∆∞u file t·ªïng h·ª£p
                if copied_count > 0:
                    summary_wb.save(summary_file)
                    summary_wb.close()
                    print(f"üìã ƒê√£ t·∫°o file t·ªïng h·ª£p: {summary_file.name} ({copied_count} sheet)")
                    return True
                else:
                    summary_wb.close()
                    print("‚ùå Kh√¥ng c√≥ file n√†o ƒë∆∞·ª£c copy v√†o file t·ªïng h·ª£p")
                    return False
                
        except Exception as e:
            print(f"‚ùå L·ªói t·∫°o file t·ªïng h·ª£p: {str(e)}")
            return False

    def enable_summary_creation(self):
        """
        B·∫≠t t√≠nh nƒÉng t·∫°o file t·ªïng h·ª£p K·∫øt qu·∫£.xlsx
        """
        self.create_summary = True
        
    def disable_summary_creation(self):
        """
        T·∫Øt t√≠nh nƒÉng t·∫°o file t·ªïng h·ª£p K·∫øt qu·∫£.xlsx
        """
        self.create_summary = False

def main():
    """
    H√†m main ƒë·ªÉ x·ª≠ l√Ω Excel t√≠ch h·ª£p v√†o check order
    """
    processor = ExcelProcessor()
    
    # X·ª≠ l√Ω c√°c file Excel
    success = processor.process_excel_files()
    
    if success:
        print("‚úÖ Ho√†n th√†nh x·ª≠ l√Ω Excel!")
    else:
        print("‚ùå C√≥ l·ªói trong qu√° tr√¨nh x·ª≠ l√Ω!")

def process_excel_for_check_order():
    """
    H√†m ƒë·ªÉ t√≠ch h·ª£p v√†o h·ªá th·ªëng check order
    Tr·∫£ v·ªÅ True n·∫øu x·ª≠ l√Ω th√†nh c√¥ng, False n·∫øu c√≥ l·ªói
    """
    try:
        processor = ExcelProcessor()
        return processor.process_excel_files()
    except Exception as e:
        print(f"‚ùå L·ªói x·ª≠ l√Ω Excel: {str(e)}")
        return False

if __name__ == "__main__":
    main()
