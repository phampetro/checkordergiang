import os
import sys
import json
import time
import shutil
import warnings
import copy
from pathlib import Path
from datetime import datetime
from playwright.sync_api import sync_playwright, TimeoutError as PlaywrightTimeoutError

import openpyxl

# Import Excel processor
from process_excel import process_excel_for_check_order

# T·∫Øt warning openpyxl v·ªÅ default style
warnings.filterwarnings("ignore", category=UserWarning, module="openpyxl")

class OrderChecker:
    def ensure_template_excel(self):
        """
        Ki·ªÉm tra file input/template.xlsx, n·∫øu ch∆∞a c√≥ th√¨ t·∫°o file m·∫´u v·ªõi 2 c·ªôt: T√™n vi·∫øt t·∫Øt, T√™n b√°o c√°o
        """
        excel_path = self.input_dir / "template.xlsx"
        if not excel_path.exists():
            from openpyxl import Workbook
            wb = Workbook()
            ws = wb.active
            ws.append(["T√™n vi·∫øt t·∫Øt", "T√™n b√°o c√°o"])
            ws.append(["DHTC", "DHTC - ƒê∆°n h√†ng th√†nh c√¥ng"])
            wb.save(excel_path)
    def load_report_list_from_excel(self):
        """
        ƒê·ªçc danh s√°ch b√°o c√°o t·ª´ input/template.xlsx
        Tr·∫£ v·ªÅ list c√°c dict: { 'short_name': ..., 'report_name': ... }
        """
        excel_path = self.input_dir / "template.xlsx"
        if not excel_path.exists():
            return None
        wb = openpyxl.load_workbook(excel_path)
        ws = wb.active
        rows = list(ws.iter_rows(min_row=2, values_only=True))
        if not rows:
            return None
        report_list = []
        for row in rows:
            if row[0] and row[1]:
                report_list.append({
                    'short_name': str(row[0]).strip(),
                    'report_name': str(row[1]).strip()
                })
        if not report_list:
            return None
        return report_list
    def __init__(self):
        self.base_path = self.get_base_path()
        self.input_dir = self.setup_directory("input")
        self.output_dir = self.setup_directory("output")
        self.daily_output_dir = self.setup_daily_output_directory()
        self.ensure_template_excel()
        self.chromium_path = self.get_chromium_path()
        self.config_file = self.input_dir / "config.json"
        self.config = self.load_or_create_config()
        
    def get_base_path(self):
        """
        Ki·ªÉm tra ch·∫ø ƒë·ªô ch·∫°y v√† tr·∫£ v·ªÅ ƒë∆∞·ªùng d·∫´n base
        - Dev mode: th∆∞ m·ª•c ch·ª©a file .py
        - Packaged mode: th∆∞ m·ª•c ch·ª©a file .exe ho·∫∑c _internal
        """
        if getattr(sys, 'frozen', False):
            # Ch·∫ø ƒë·ªô ƒë√≥ng g√≥i (exe)
            # Ki·ªÉm tra xem c√≥ ph·∫£i --onefile hay --onedir
            if hasattr(sys, '_MEIPASS'):
                # --onefile: sys._MEIPASS l√† th∆∞ m·ª•c t·∫°m
                # Base path l√† th∆∞ m·ª•c ch·ª©a .exe
                base_path = Path(sys.executable).parent
            else:
                # --onedir: sys.executable l√† trong th∆∞ m·ª•c dist
                base_path = Path(sys.executable).parent
        else:
            # Ch·∫ø ƒë·ªô dev
            base_path = Path(__file__).parent
            
        return base_path
    
    def setup_directory(self, dir_name):
        """
        T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a t·ªìn t·∫°i
        Trong ch·∫ø ƒë·ªô --onedir, file ƒë∆∞·ª£c ƒë·∫∑t trong _internal
        """
        if getattr(sys, 'frozen', False):
            # Packaged mode - t√¨m trong _internal tr∆∞·ªõc
            internal_path = self.base_path / "_internal" / dir_name
            if internal_path.exists():
                return internal_path
            
        # Dev mode ho·∫∑c fallback
        dir_path = self.base_path / dir_name
        if not dir_path.exists():
            dir_path.mkdir(parents=True, exist_ok=True)
        return dir_path
    
    def get_chromium_path(self):
        """
        T√¨m ƒë∆∞·ªùng d·∫´n Chromium trong th∆∞ m·ª•c d·ª± √°n
        """
        # Danh s√°ch th∆∞ m·ª•c ƒë·ªÉ t√¨m Chromium theo ch·∫ø ƒë·ªô
        if getattr(sys, 'frozen', False):
            # Packaged mode - t√¨m trong _internal ho·∫∑c c√πng c·∫•p
            chromium_base_dirs = [
                self.base_path / "_internal" / "chromium-browser",  # --onedir
                self.base_path / "chromium-browser",               # Backup location
                self.base_path / "chromium",
            ]
        else:
            # Dev mode - t√¨m trong th∆∞ m·ª•c project
            chromium_base_dirs = [
                self.base_path / "chromium-browser",
                self.base_path / "chromium", 
                self.base_path / "browser",
            ]
        
        for base_dir in chromium_base_dirs:
            if base_dir.exists():
                # T√¨m file chrome.exe trong t·∫•t c·∫£ th∆∞ m·ª•c con
                for chrome_exe in base_dir.rglob("chrome.exe"):
                    return str(chrome_exe)
        
        return None
    
    def install_browser(self):
        """
        C√†i ƒë·∫∑t Chromium v√†o th∆∞ m·ª•c d·ª± √°n
        """
        browser_dir = self.base_path / "chromium-browser"
        
        # T·∫°o th∆∞ m·ª•c browser n·∫øu ch∆∞a c√≥
        browser_dir.mkdir(exist_ok=True)
        
        # Set environment variable ƒë·ªÉ playwright c√†i v√†o th∆∞ m·ª•c n√†y
        os.environ['PLAYWRIGHT_BROWSERS_PATH'] = str(browser_dir)
        
        # C√†i ƒë·∫∑t chromium
        os.system(f'"{sys.executable}" -m playwright install chromium')
        
        # T√¨m l·∫°i ƒë∆∞·ªùng d·∫´n sau khi c√†i
        self.chromium_path = self.get_chromium_path()
    
    def run_browser_test(self, url=None):
        """
        Ch·∫°y automation: ƒëƒÉng nh·∫≠p, duy·ªát t·ª´ng b√°o c√°o trong template.xlsx, t·∫£i v·ªÅ v√† ƒë·∫∑t t√™n file theo T√™n vi·∫øt t·∫Øt
        """
        if not self.config:
            return False

        report_list = self.load_report_list_from_excel()
        if not report_list:
            return False

        if not url:
            url = self.config['website']['url']

        try:
            with sync_playwright() as p:
                if self.chromium_path and os.path.exists(self.chromium_path):
                    browser = p.chromium.launch(
                        executable_path=self.chromium_path,
                        headless=True
                    )
                else:
                    browser = p.chromium.launch(headless=True)

                context = browser.new_context()
                page = context.new_page()

                login_success = self.login_to_website(page)
                if not login_success:
                    print("‚ùå ƒêƒÉng nh·∫≠p th·∫•t b·∫°i!")
                    return False

                navigation_success = self.navigate_to_reports(page)
                if not navigation_success:
                    print("‚ùå ƒêi·ªÅu h∆∞·ªõng th·∫•t b·∫°i!")
                    return False

                # L·∫∑p qua t·ª´ng b√°o c√°o trong Excel
                all_success = True
                downloaded_files = []
                
                print("‚îÄ" * 60)
                print("üì• ƒêang t·∫£i b√°o c√°o...")
                for idx, report in enumerate(report_list, 1):
                    success = self.select_kpi_and_download(page, report['report_name'], report['short_name'])
                    if success:
                        downloaded_files.append(report['short_name'])
                        print(f"‚úÖ T·∫£i file {idx}: {report['short_name']} th√†nh c√¥ng")
                    else:
                        print(f"‚ùå T·∫£i file {idx}: {report['short_name']} th·∫•t b·∫°i")
                        all_success = False
                
                if downloaded_files:
                    print(f"‚úÖ ƒê√£ t·∫£i th√†nh c√¥ng {len(downloaded_files)} b√°o c√°o")
                print("‚îÄ" * 60)
                
                # ƒê√≥ng browser an to√†n
                try:
                    context.close()
                    browser.close()
                except:
                    pass
                
                # Th√¥ng b√°o ho√†n th√†nh
                if downloaded_files:
                    print("\n" + "‚îÄ" * 60)
                    print("üìä ƒêang x·ª≠ l√Ω file Excel...")
                    try:
                        process_success = process_excel_for_check_order()
                        if process_success:
                            print("‚úÖ X·ª≠ l√Ω Excel ho√†n th√†nh!")
                        else:
                            print("‚ö†Ô∏è X·ª≠ l√Ω Excel c√≥ v·∫•n ƒë·ªÅ!")
                    except Exception as e:
                        print(f"‚ùå L·ªói x·ª≠ l√Ω Excel: {str(e)}")
                    print(f"üìÅ C√°c file ƒë√£ ƒë∆∞·ª£c l∆∞u t·∫°i: {self.daily_output_dir}")
                    print("‚îÄ" * 60)
                
                return all_success
        except Exception as e:
            print(f"‚ùå L·ªói browser: {str(e)}")
            return False

    def select_kpi_and_download(self, page, kpi_text, short_name):
        """
        Ch·ªçn KPI theo t√™n (kpi_text), t·∫£i file v√† ƒë·∫∑t t√™n theo short_name
        """
        try:
            kpi_dropdown = self.get_locator(page, self.config['selectors']['kpi_dropdown'])
            kpi_dropdown.click()
            try:
                kpi_dropdown.select_option(label=kpi_text)
            except Exception as e:
                try:
                    dhtc_option = self.get_locator(page, f'//option[contains(text(), "{kpi_text}")]')
                    dhtc_option.click()
                except Exception as e2:
                    try:
                        dhtc_option = self.get_locator(page, f'//option[contains(text(), "{kpi_text.split()[0]}")]')
                        dhtc_option.click()
                    except Exception as e3:
                        return False

            selected_text = kpi_dropdown.locator('option:checked').inner_text()
            if kpi_text in selected_text or kpi_text.split()[0] in selected_text:
                return self.click_search_and_download(page, custom_filename=short_name)
            else:
                return False
        except PlaywrightTimeoutError:
            return False
        except Exception as e:
            return False

    def load_or_create_config(self):
        """
        T·∫£i ho·∫∑c t·∫°o file config.json
        """
        if not self.config_file.exists():
            print("üìù T·∫°o file config.json t·ª´ template...")
            self.create_default_config()
            # Th·ª≠ load l·∫°i sau khi t·∫°o
            try:
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                return config
            except:
                return None
        
        try:
            with open(self.config_file, 'r', encoding='utf-8') as f:
                config = json.load(f)
            
            # Ki·ªÉm tra th√¥ng tin b·∫Øt bu·ªôc
            if not config.get('credentials', {}).get('username') or not config.get('credentials', {}).get('password'):
                print("‚ùå Config thi·∫øu username/password!")
                return None
            
            if not config.get('website', {}).get('url'):
                print("‚ùå Config thi·∫øu URL website!")
                return None
            
            return config
            
        except json.JSONDecodeError as e:
            print(f"‚ùå Config JSON kh√¥ng h·ª£p l·ªá: {e}")
            return None
        except Exception as e:
            print(f"‚ùå L·ªói ƒë·ªçc config: {e}")
            return None
    
    def create_default_config(self):
        """
        T·∫°o file config t·ª´ template
        """
        template_file = self.input_dir / "config.template.json"
        
        # Ki·ªÉm tra file template c√≥ t·ªìn t·∫°i kh√¥ng
        if template_file.exists():
            try:
                # Copy t·ª´ template
                with open(template_file, 'r', encoding='utf-8') as f:
                    template_config = json.load(f)
                
                # L∆∞u th√†nh config.json
                with open(self.config_file, 'w', encoding='utf-8') as f:
                    json.dump(template_config, f, indent=2, ensure_ascii=False)
                
                print(f"‚úÖ ƒê√£ t·∫°o config.json t·ª´ template")
                return
                
            except Exception as e:
                print(f"‚ùå L·ªói ƒë·ªçc template: {e}")
        
        # Fallback: t·∫°o config m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥ template
        default_config = {
            "website": {
                "url": "https://example.com/login",
                "name": "Order Management System"
            },
            "credentials": {
                "username": "",
                "password": ""
            },
            "selectors": {
                "username_field": "#username",
                "password_field": "#password", 
                "login_button": "#login-button",
                "dashboard_indicator": ".dashboard",
                "search_button": "#search-btn",
                "menu_638": "#menu-638",
                "dms_report_kpi": "#dms-report-kpi",
                "rpt_kpi_staff": "#rpt-kpi-staff",
                "kpi_dropdown": "#kpi-dropdown",
                "dhtc_option_text": "DHTC - ƒê∆°n h√†ng th√†nh c√¥ng",
                "from_month_field": "#from-month-field",
                "month_year_picker_year": "#month-year-picker-year",
                "month_year_picker_month": "//select[@id='month-year-picker-month']/option[text()='T{month}']"
            },
            "settings": {
                "wait_timeout": 30000,
                "auto_wait": True,
                "fast_mode": False
            }
        }
        
        with open(self.config_file, 'w', encoding='utf-8') as f:
            json.dump(default_config, f, indent=2, ensure_ascii=False)
        
        print(f"‚úÖ ƒê√£ t·∫°o config.json m·∫∑c ƒë·ªãnh")
    
    def login_to_website(self, page):
        """
        ƒêƒÉng nh·∫≠p v√†o website s·ª≠ d·ª•ng th√¥ng tin t·ª´ config
        """
        if not self.config:
            return False
            
        try:
            url = self.config['website']['url']
            username = self.config['credentials']['username']
            password = self.config['credentials']['password']
            selectors = self.config['selectors']
            timeout = self.config['settings']['wait_timeout']
            
            # M·ªü trang ƒëƒÉng nh·∫≠p
            page.goto(url)
            page.wait_for_load_state('networkidle')
            
            # T√¨m v√† ƒëi·ªÅn username
            try:
                username_field = self.get_locator(page, selectors['username_field'])
                self.smart_wait_for_element(username_field, 'visible')
                username_field.fill(username)
            except PlaywrightTimeoutError:
                return False
            
            # T√¨m v√† ƒëi·ªÅn password
            try:
                password_field = self.get_locator(page, selectors['password_field'])
                self.smart_wait_for_element(password_field, 'visible')
                password_field.fill(password)
            except PlaywrightTimeoutError:
                return False
            
            # Click n√∫t ƒëƒÉng nh·∫≠p
            try:
                login_button = self.get_locator(page, selectors['login_button'])
                self.smart_wait_for_element(login_button, 'visible')
                login_button.click()
            except PlaywrightTimeoutError:
                return False
            
            # ƒê·ª£i trang dashboard load
            try:
                dashboard_indicator = self.get_locator(page, selectors['dashboard_indicator'])
                self.smart_wait_for_element(dashboard_indicator, 'visible')
                return True
                
            except PlaywrightTimeoutError:
                return False
                
        except Exception as e:
            return False

    def navigate_to_reports(self, page):
        """
        ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn trang b√°o c√°o sau khi ƒëƒÉng nh·∫≠p th√†nh c√¥ng
        """
        try:
            menu_item_638 = self.get_locator(page, self.config['selectors']['menu_638'])
            menu_item_638.click()
            page.wait_for_load_state('networkidle')

            dms_report_kpi = self.get_locator(page, self.config['selectors']['dms_report_kpi'])
            dms_report_kpi.click()

            rpt_kpi_staff = self.get_locator(page, self.config['selectors']['rpt_kpi_staff'])
            try:
                rpt_kpi_staff.scroll_into_view_if_needed()
            except:
                pass
            rpt_kpi_staff.click()
            page.wait_for_load_state('networkidle')
            return True
        except PlaywrightTimeoutError:
            return False
        except Exception as e:
            return False

    def select_kpi_dropdown(self, page):
        """
        Ch·ªçn KPI t·ª´ dropdown lstKPI
        """
        try:
            print("   Looking for dropdown #lstKPI...")
            kpi_dropdown = self.get_locator(page, self.config['selectors']['kpi_dropdown'])
            kpi_dropdown.click()
            print("‚úÖ Step 3a: Clicked KPI dropdown")

            print(f"   Selecting '{self.config['selectors']['dhtc_option_text']}'...")
            try:
                kpi_dropdown.select_option(label=self.config['selectors']['dhtc_option_text'])
                print("‚úÖ Step 3b: Selected DHTC option using label")
            except Exception as e:
                print(f"   Method 1 failed: {e}")
                try:
                    option_text = self.config['selectors']['dhtc_option_text']
                    dhtc_option = self.get_locator(page, f'//option[contains(text(), "{option_text}")]')
                    dhtc_option.click()
                    print("‚úÖ Step 3b: Selected DHTC option using text search")
                except Exception as e2:
                    print(f"   Method 2 failed: {e2}")
                    try:
                        dhtc_option = self.get_locator(page, '//option[contains(text(), "DHTC")]')
                        dhtc_option.click()
                        print("‚úÖ Step 3b: Selected DHTC option using partial text")
                    except Exception as e3:
                        print(f"   All methods failed: {e3}")
                        return False

            selected_text = kpi_dropdown.locator('option:checked').inner_text()
            expected_text = self.config['selectors']['dhtc_option_text']
            if expected_text in selected_text or "DHTC" in selected_text:
                print(f"‚úÖ Step 3c: Confirmed DHTC option is selected: {selected_text}")
                print("üîç Step 4: Looking for Search button...")
                search_success = self.click_search_and_download(page)
                if search_success:
                    print("‚úÖ Step 4: Search and download completed successfully!")
                    return True
                else:
                    print("‚ùå Step 4: Search and download failed!")
                    return False
            else:
                print(f"‚ùå Step 3c: Wrong option selected. Current text: {selected_text}")
                return False
        except PlaywrightTimeoutError:
            print("‚ùå Step 3 failed: KPI dropdown not found")
            return False
        except Exception as e:
            print(f"‚ùå KPI selection error: {e}")
            return False

    def select_month_year_before_search(self, page):
        """
        Ch·ªçn th√°ng/nƒÉm tr∆∞·ªõc khi click search
        Ch·ªçn ng√†y hi·ªán t·∫°i l√πi 1 ng√†y ƒë·ªÉ x√°c ƒë·ªãnh th√°ng/nƒÉm
        """
        try:
            from datetime import datetime, timedelta
            
            # T√≠nh ng√†y hi·ªán t·∫°i l√πi 1 ng√†y
            yesterday = datetime.now() - timedelta(days=1)
            target_year = yesterday.year
            target_month = yesterday.month
            
            print(f"üìÖ Ch·ªçn th√°ng/nƒÉm: {target_month}/{target_year}")
            
            # B∆∞·ªõc 1: Click v√†o field fromMonth ƒë·ªÉ m·ªü month/year picker
            from_month_field = self.get_locator(page, self.config['selectors']['from_month_field'])
            from_month_field.click()
            page.wait_for_timeout(1000)  # ƒê·ª£i picker hi·ªán l√™n
            
            # B∆∞·ªõc 2: Ch·ªçn nƒÉm
            year_selector = self.get_locator(page, self.config['selectors']['month_year_picker_year'])
            year_selector.select_option(value=str(target_year))
            print(f"‚úÖ ƒê√£ ch·ªçn nƒÉm: {target_year}")
            page.wait_for_timeout(500)
            
            # B∆∞·ªõc 3: Ch·ªçn th√°ng
            month_selector_template = self.config['selectors']['month_year_picker_month']
            month_selector = month_selector_template.format(month=target_month)
            month_element = self.get_locator(page, month_selector)
            month_element.click()
            print(f"‚úÖ ƒê√£ ch·ªçn th√°ng: T{target_month}")
            page.wait_for_timeout(1000)
            
            return True
            
        except Exception as e:
            print(f"‚ùå L·ªói ch·ªçn th√°ng/nƒÉm: {str(e)}")
            return False

    def click_search_and_download(self, page, custom_filename=None):
        """
        Click n√∫t Search v√† x·ª≠ l√Ω download file v·ªõi retry logic
        N·∫øu custom_filename ƒë∆∞·ª£c truy·ªÅn v√†o th√¨ ƒë·∫∑t t√™n file t·∫£i v·ªÅ theo t√™n n√†y
        """
        max_retries = 3
        for attempt in range(1, max_retries + 1):
            try:
                # B∆∞·ªõc m·ªõi: Ch·ªçn th√°ng/nƒÉm tr∆∞·ªõc khi search
                month_year_success = self.select_month_year_before_search(page)
                if not month_year_success:
                    print(f"   ‚ùå Kh√¥ng th·ªÉ ch·ªçn th√°ng/nƒÉm, th·ª≠ l·∫°i l·∫ßn {attempt}")
                    if attempt < max_retries:
                        if self.retry_navigation_from_menu(page):
                            continue
                    return False
                
                search_button = self.get_locator(page, self.config['selectors']['search_button'])
                if custom_filename:
                    download_path = self.daily_output_dir / f"{custom_filename}.xlsx"
                else:
                    download_path = self.daily_output_dir / f"report_{int(time.time())}.xlsx"
                with page.expect_download(timeout=180000) as download_info:
                    search_button.click()
                download = download_info.value
                download.save_as(str(download_path))
                if download_path.exists() and download_path.stat().st_size > 0:
                    return True
                else:
                    if attempt < max_retries:
                        if self.retry_navigation_from_menu(page):
                            continue
                    print(f"‚ùå T·∫£i th·∫•t b·∫°i: {custom_filename or download_path.name}")
                    return False
            except Exception as e:
                if attempt < max_retries:
                    if self.retry_navigation_from_menu(page):
                        continue
                else:
                    print(f"‚ùå T·∫£i th·∫•t b·∫°i: {custom_filename or 'Unknown'} - L·ªói: {str(e)}")
                    return False
        return False
    
    def retry_navigation_from_menu(self, page):
        """
        Th·ª±c hi·ªán l·∫°i navigation t·ª´ menu #638 khi retry
        """
        try:
            timeout = self.config['settings']['wait_timeout']
            
            # Refresh page v√† ƒë·ª£i load
            page.reload()
            page.wait_for_load_state('networkidle')
            page.wait_for_timeout(3000)
            
            # Click menu #638
            menu_item_638 = self.get_locator(page, self.config['selectors']['menu_638'])
            menu_item_638.wait_for(state='visible', timeout=timeout)
            menu_item_638.click()
            
            page.wait_for_load_state('networkidle')
            page.wait_for_timeout(2000)
            
            # Click DMS_REPORT_KPI
            dms_report_kpi = self.get_locator(page, self.config['selectors']['dms_report_kpi'])
            dms_report_kpi.wait_for(state='visible', timeout=timeout)
            dms_report_kpi.click()
            
            page.wait_for_timeout(1000)
            
            # Click RPT_KPI_STAFF
            rpt_kpi_staff = self.get_locator(page, self.config['selectors']['rpt_kpi_staff'])
            rpt_kpi_staff.wait_for(state='visible', timeout=timeout)
            rpt_kpi_staff.click()
            
            page.wait_for_load_state('networkidle')
            page.wait_for_timeout(2000)
            
            # B·ªè vi·ªác ch·ªçn KPI dropdown ·ªü ƒë√¢y v√¨ s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω trong select_kpi_and_download
            
            return True
            
        except Exception as e:
            return False

    def smart_wait_for_element(self, locator, state='visible'):
        """
        Smart waiting strategy - s·ª≠ d·ª•ng auto wait ho·∫∑c custom timeout
        """
        settings = self.config.get('settings', {})
        auto_wait = settings.get('auto_wait', True)
        fast_mode = settings.get('fast_mode', False)
        
        if auto_wait:
            # S·ª≠ d·ª•ng Playwright default timeout (30s) - nhanh v√† th√¥ng minh
            if fast_mode:
                # Fast mode: timeout ng·∫Øn h∆°n
                locator.wait_for(state=state, timeout=5000)  # 5 gi√¢y
            else:
                # Normal mode: d√πng default c·ªßa Playwright
                locator.wait_for(state=state)  # 30 gi√¢y default
        else:
            # Custom timeout t·ª´ config
            timeout = settings.get('wait_timeout', 30000)
            locator.wait_for(state=state, timeout=timeout)

    def get_locator(self, page, selector):
        """
        T·∫°o locator t·ª´ selector (h·ªó tr·ª£ CSS v√† XPath)
        """
        if selector.startswith('/'):
            # XPath selector
            return page.locator(f"xpath={selector}")
        else:
            # CSS selector
            return page.locator(selector)

    def setup_daily_output_directory(self):
        """
        T·∫°o th∆∞ m·ª•c output theo ng√†y hi·ªán t·∫°i (format: DDMMYYYY)
        N·∫øu ƒë√£ t·ªìn t·∫°i th√¨ ch·ªâ x√≥a c√°c file Excel c≈©, kh√¥ng x√≥a c·∫£ th∆∞ m·ª•c
        """
        today = datetime.now().strftime("%d%m%Y")
        daily_dir = self.output_dir / today
        
        if daily_dir.exists():
            # Ch·ªâ x√≥a c√°c file Excel c≈©, kh√¥ng x√≥a c·∫£ th∆∞ m·ª•c
            try:
                for excel_file in daily_dir.glob("*.xlsx"):
                    try:
                        excel_file.unlink()  # X√≥a file
                    except PermissionError:
                        print(f"‚ö†Ô∏è File {excel_file.name} ƒëang ƒë∆∞·ª£c m·ªü, b·ªè qua...")
            except Exception as e:
                print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ d·ªçn d·∫πp file c≈©: {e}")
        else:
            daily_dir.mkdir(parents=True, exist_ok=True)
        
        return daily_dir

def main():
    """
    H√†m main ch·∫°y ch∆∞∆°ng tr√¨nh
    """
    # Kh·ªüi t·∫°o OrderChecker
    checker = OrderChecker()
    
    # Ch·∫°y automation
    success = checker.run_browser_test()
    
    if success:
        print("‚úÖ Ho√†n th√†nh t·∫•t c·∫£!")
    else:
        print("‚ùå C√≥ l·ªói x·∫£y ra!")

if __name__ == "__main__":
    main()