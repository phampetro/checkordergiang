import os
import sys
import json
import time
import shutil
import warnings
from pathlib import Path
from datetime import datetime
from playwright.sync_api import sync_playwright, TimeoutError as PlaywrightTimeoutError

import openpyxl

# T·∫Øt warning openpyxl v·ªÅ default style
warnings.filterwarnings("ignore", category=UserWarning, module="openpyxl")

class OrderChecker:
    def ensure_template_excel(self):
        """
        Ki·ªÉm tra file input/template.xlsx, n·∫øu ch∆∞a c√≥ th√¨ t·∫°o file m·∫´u v·ªõi 2 c·ªôt: T√™n vi·∫øt t·∫Øt, T√™n b√°o c√°o
        """
        excel_path = self.input_dir / "template.xlsx"
        if not excel_path.exists():
            from openpyxl import Workbook
            wb = Workbook()
            ws = wb.active
            ws.append(["T√™n vi·∫øt t·∫Øt", "T√™n b√°o c√°o"])
            ws.append(["DHTC", "DHTC - ƒê∆°n h√†ng th√†nh c√¥ng"])
            wb.save(excel_path)
    def load_report_list_from_excel(self):
        """
        ƒê·ªçc danh s√°ch b√°o c√°o t·ª´ input/template.xlsx
        Tr·∫£ v·ªÅ list c√°c dict: { 'short_name': ..., 'report_name': ... }
        """
        excel_path = self.input_dir / "template.xlsx"
        if not excel_path.exists():
            return None
        wb = openpyxl.load_workbook(excel_path)
        ws = wb.active
        rows = list(ws.iter_rows(min_row=2, values_only=True))
        if not rows:
            return None
        report_list = []
        for row in rows:
            if row[0] and row[1]:
                report_list.append({
                    'short_name': str(row[0]).strip(),
                    'report_name': str(row[1]).strip()
                })
        if not report_list:
            return None
        return report_list
    def __init__(self):
        self.base_path = self.get_base_path()
        self.input_dir = self.setup_directory("input")
        self.output_dir = self.setup_directory("output")
        self.daily_output_dir = self.setup_daily_output_directory()
        self.ensure_template_excel()
        self.chromium_path = self.get_chromium_path()
        self.config_file = self.input_dir / "config.json"
        self.config = self.load_or_create_config()
        
    def get_base_path(self):
        """
        Ki·ªÉm tra ch·∫ø ƒë·ªô ch·∫°y v√† tr·∫£ v·ªÅ ƒë∆∞·ªùng d·∫´n base
        - Dev mode: th∆∞ m·ª•c ch·ª©a file .py
        - Packaged mode: th∆∞ m·ª•c ch·ª©a file .exe ho·∫∑c _internal
        """
        if getattr(sys, 'frozen', False):
            # Ch·∫ø ƒë·ªô ƒë√≥ng g√≥i (exe)
            # Ki·ªÉm tra xem c√≥ ph·∫£i --onefile hay --onedir
            if hasattr(sys, '_MEIPASS'):
                # --onefile: sys._MEIPASS l√† th∆∞ m·ª•c t·∫°m
                # Base path l√† th∆∞ m·ª•c ch·ª©a .exe
                base_path = Path(sys.executable).parent
            else:
                # --onedir: sys.executable l√† trong th∆∞ m·ª•c dist
                base_path = Path(sys.executable).parent
        else:
            # Ch·∫ø ƒë·ªô dev
            base_path = Path(__file__).parent
            
        return base_path
    
    def setup_directory(self, dir_name):
        """
        T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a t·ªìn t·∫°i
        Trong ch·∫ø ƒë·ªô --onedir, file ƒë∆∞·ª£c ƒë·∫∑t trong _internal
        """
        if getattr(sys, 'frozen', False):
            # Packaged mode - t√¨m trong _internal tr∆∞·ªõc
            internal_path = self.base_path / "_internal" / dir_name
            if internal_path.exists():
                return internal_path
            
        # Dev mode ho·∫∑c fallback
        dir_path = self.base_path / dir_name
        if not dir_path.exists():
            dir_path.mkdir(parents=True, exist_ok=True)
        return dir_path
    
    def get_chromium_path(self):
        """
        T√¨m ƒë∆∞·ªùng d·∫´n Chromium trong th∆∞ m·ª•c d·ª± √°n
        """
        # Danh s√°ch th∆∞ m·ª•c ƒë·ªÉ t√¨m Chromium theo ch·∫ø ƒë·ªô
        if getattr(sys, 'frozen', False):
            # Packaged mode - t√¨m trong _internal ho·∫∑c c√πng c·∫•p
            chromium_base_dirs = [
                self.base_path / "_internal" / "chromium-browser",  # --onedir
                self.base_path / "chromium-browser",               # Backup location
                self.base_path / "chromium",
            ]
        else:
            # Dev mode - t√¨m trong th∆∞ m·ª•c project
            chromium_base_dirs = [
                self.base_path / "chromium-browser",
                self.base_path / "chromium", 
                self.base_path / "browser",
            ]
        
        for base_dir in chromium_base_dirs:
            if base_dir.exists():
                # T√¨m file chrome.exe trong t·∫•t c·∫£ th∆∞ m·ª•c con
                for chrome_exe in base_dir.rglob("chrome.exe"):
                    return str(chrome_exe)
        
        return None
    
    def install_browser(self):
        """
        C√†i ƒë·∫∑t Chromium v√†o th∆∞ m·ª•c d·ª± √°n
        """
        browser_dir = self.base_path / "chromium-browser"
        
        # T·∫°o th∆∞ m·ª•c browser n·∫øu ch∆∞a c√≥
        browser_dir.mkdir(exist_ok=True)
        
        # Set environment variable ƒë·ªÉ playwright c√†i v√†o th∆∞ m·ª•c n√†y
        os.environ['PLAYWRIGHT_BROWSERS_PATH'] = str(browser_dir)
        
        # C√†i ƒë·∫∑t chromium
        os.system(f'"{sys.executable}" -m playwright install chromium')
        
        # T√¨m l·∫°i ƒë∆∞·ªùng d·∫´n sau khi c√†i
        self.chromium_path = self.get_chromium_path()
    
    def run_browser_test(self, url=None):
        """
        Ch·∫°y automation: ƒëƒÉng nh·∫≠p, duy·ªát t·ª´ng b√°o c√°o trong template.xlsx, t·∫£i v·ªÅ v√† ƒë·∫∑t t√™n file theo T√™n vi·∫øt t·∫Øt
        """
        if not self.config:
            return False

        report_list = self.load_report_list_from_excel()
        if not report_list:
            return False

        if not url:
            url = self.config['website']['url']

        try:
            with sync_playwright() as p:
                if self.chromium_path and os.path.exists(self.chromium_path):
                    browser = p.chromium.launch(
                        executable_path=self.chromium_path,
                        headless=True
                    )
                else:
                    browser = p.chromium.launch(headless=True)

                context = browser.new_context()
                page = context.new_page()

                login_success = self.login_to_website(page)
                if not login_success:
                    print("‚ùå ƒêƒÉng nh·∫≠p th·∫•t b·∫°i!")
                    return False

                navigation_success = self.navigate_to_reports(page)
                if not navigation_success:
                    print("‚ùå ƒêi·ªÅu h∆∞·ªõng th·∫•t b·∫°i!")
                    return False

                # L·∫∑p qua t·ª´ng b√°o c√°o trong Excel
                all_success = True
                downloaded_files = []
                
                print("‚îÄ" * 60)
                print("üì• ƒêang t·∫£i b√°o c√°o...")
                for idx, report in enumerate(report_list, 1):
                    success = self.select_kpi_and_download(page, report['report_name'], report['short_name'])
                    if success:
                        downloaded_files.append(report['short_name'])
                        print(f"   ‚úÖ T·∫£i file {idx}: {report['short_name']} th√†nh c√¥ng")
                    else:
                        print(f"   ‚ùå T·∫£i file {idx}: {report['short_name']} th·∫•t b·∫°i")
                        all_success = False
                
                if downloaded_files:
                    print(f"‚úÖ ƒê√£ t·∫£i th√†nh c√¥ng {len(downloaded_files)} b√°o c√°o")
                print("‚îÄ" * 60)
                
                # ƒê√≥ng browser an to√†n
                try:
                    context.close()
                    browser.close()
                except:
                    pass
                
                # X·ª≠ l√Ω c√°c file Excel ƒë√£ t·∫£i v·ªÅ
                if downloaded_files:
                    print("\n" + "‚îÄ" * 60)
                    print("üìä ƒêang x·ª≠ l√Ω v√† t·∫°o file k·∫øt qu·∫£...")
                    process_success = self.process_downloaded_excel_files()
                    if process_success:
                        self.analyze_excel_data()
                    print("‚îÄ" * 60)
                
                return all_success
        except Exception as e:
            print(f"‚ùå L·ªói browser: {str(e)}")
            return False

    def select_kpi_and_download(self, page, kpi_text, short_name):
        """
        Ch·ªçn KPI theo t√™n (kpi_text), t·∫£i file v√† ƒë·∫∑t t√™n theo short_name
        """
        try:
            kpi_dropdown = self.get_locator(page, self.config['selectors']['kpi_dropdown'])
            kpi_dropdown.click()
            try:
                kpi_dropdown.select_option(label=kpi_text)
            except Exception as e:
                try:
                    dhtc_option = self.get_locator(page, f'//option[contains(text(), "{kpi_text}")]')
                    dhtc_option.click()
                except Exception as e2:
                    try:
                        dhtc_option = self.get_locator(page, f'//option[contains(text(), "{kpi_text.split()[0]}")]')
                        dhtc_option.click()
                    except Exception as e3:
                        return False

            selected_text = kpi_dropdown.locator('option:checked').inner_text()
            if kpi_text in selected_text or kpi_text.split()[0] in selected_text:
                return self.click_search_and_download(page, custom_filename=short_name)
            else:
                return False
        except PlaywrightTimeoutError:
            return False
        except Exception as e:
            return False

    def load_or_create_config(self):
        """
        T·∫£i ho·∫∑c t·∫°o file config.json
        """
        if not self.config_file.exists():
            print("üìù T·∫°o file config.json t·ª´ template...")
            self.create_default_config()
            # Th·ª≠ load l·∫°i sau khi t·∫°o
            try:
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                return config
            except:
                return None
        
        try:
            with open(self.config_file, 'r', encoding='utf-8') as f:
                config = json.load(f)
            
            # Ki·ªÉm tra th√¥ng tin b·∫Øt bu·ªôc
            if not config.get('credentials', {}).get('username') or not config.get('credentials', {}).get('password'):
                print("‚ùå Config thi·∫øu username/password!")
                return None
            
            if not config.get('website', {}).get('url'):
                print("‚ùå Config thi·∫øu URL website!")
                return None
            
            return config
            
        except json.JSONDecodeError as e:
            print(f"‚ùå Config JSON kh√¥ng h·ª£p l·ªá: {e}")
            return None
        except Exception as e:
            print(f"‚ùå L·ªói ƒë·ªçc config: {e}")
            return None
    
    def create_default_config(self):
        """
        T·∫°o file config t·ª´ template
        """
        template_file = self.input_dir / "config.template.json"
        
        # Ki·ªÉm tra file template c√≥ t·ªìn t·∫°i kh√¥ng
        if template_file.exists():
            try:
                # Copy t·ª´ template
                with open(template_file, 'r', encoding='utf-8') as f:
                    template_config = json.load(f)
                
                # L∆∞u th√†nh config.json
                with open(self.config_file, 'w', encoding='utf-8') as f:
                    json.dump(template_config, f, indent=2, ensure_ascii=False)
                
                print(f"‚úÖ ƒê√£ t·∫°o config.json t·ª´ template")
                return
                
            except Exception as e:
                print(f"‚ùå L·ªói ƒë·ªçc template: {e}")
        
        # Fallback: t·∫°o config m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥ template
        default_config = {
            "website": {
                "url": "https://example.com/login",
                "name": "Order Management System"
            },
            "credentials": {
                "username": "",
                "password": ""
            },
            "selectors": {
                "username_field": "#username",
                "password_field": "#password", 
                "login_button": "#login-button",
                "dashboard_indicator": ".dashboard",
                "search_button": "#search-btn",
                "menu_638": "#menu-638",
                "dms_report_kpi": "#dms-report-kpi",
                "rpt_kpi_staff": "#rpt-kpi-staff",
                "kpi_dropdown": "#kpi-dropdown",
                "dhtc_option_text": "DHTC - ƒê∆°n h√†ng th√†nh c√¥ng",
                "from_month_field": "#from-month-field",
                "month_year_picker_year": "#month-year-picker-year",
                "month_year_picker_month": "//select[@id='month-year-picker-month']/option[text()='T{month}']"
            },
            "settings": {
                "wait_timeout": 30000,
                "auto_wait": True,
                "fast_mode": False
            }
        }
        
        with open(self.config_file, 'w', encoding='utf-8') as f:
            json.dump(default_config, f, indent=2, ensure_ascii=False)
        
        print(f"‚úÖ ƒê√£ t·∫°o config.json m·∫∑c ƒë·ªãnh")
    
    def login_to_website(self, page):
        """
        ƒêƒÉng nh·∫≠p v√†o website s·ª≠ d·ª•ng th√¥ng tin t·ª´ config
        """
        if not self.config:
            return False
            
        try:
            url = self.config['website']['url']
            username = self.config['credentials']['username']
            password = self.config['credentials']['password']
            selectors = self.config['selectors']
            timeout = self.config['settings']['wait_timeout']
            
            # M·ªü trang ƒëƒÉng nh·∫≠p
            page.goto(url)
            page.wait_for_load_state('networkidle')
            
            # T√¨m v√† ƒëi·ªÅn username
            try:
                username_field = self.get_locator(page, selectors['username_field'])
                self.smart_wait_for_element(username_field, 'visible')
                username_field.fill(username)
            except PlaywrightTimeoutError:
                return False
            
            # T√¨m v√† ƒëi·ªÅn password
            try:
                password_field = self.get_locator(page, selectors['password_field'])
                self.smart_wait_for_element(password_field, 'visible')
                password_field.fill(password)
            except PlaywrightTimeoutError:
                return False
            
            # Click n√∫t ƒëƒÉng nh·∫≠p
            try:
                login_button = self.get_locator(page, selectors['login_button'])
                self.smart_wait_for_element(login_button, 'visible')
                login_button.click()
            except PlaywrightTimeoutError:
                return False
            
            # ƒê·ª£i trang dashboard load
            try:
                dashboard_indicator = self.get_locator(page, selectors['dashboard_indicator'])
                self.smart_wait_for_element(dashboard_indicator, 'visible')
                return True
                
            except PlaywrightTimeoutError:
                return False
                
        except Exception as e:
            return False

    def navigate_to_reports(self, page):
        """
        ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn trang b√°o c√°o sau khi ƒëƒÉng nh·∫≠p th√†nh c√¥ng
        """
        try:
            menu_item_638 = self.get_locator(page, self.config['selectors']['menu_638'])
            menu_item_638.click()
            page.wait_for_load_state('networkidle')

            dms_report_kpi = self.get_locator(page, self.config['selectors']['dms_report_kpi'])
            dms_report_kpi.click()

            rpt_kpi_staff = self.get_locator(page, self.config['selectors']['rpt_kpi_staff'])
            try:
                rpt_kpi_staff.scroll_into_view_if_needed()
            except:
                pass
            rpt_kpi_staff.click()
            page.wait_for_load_state('networkidle')
            return True
        except PlaywrightTimeoutError:
            return False
        except Exception as e:
            return False

    def select_kpi_dropdown(self, page):
        """
        Ch·ªçn KPI t·ª´ dropdown lstKPI
        """
        try:
            print("   Looking for dropdown #lstKPI...")
            kpi_dropdown = self.get_locator(page, self.config['selectors']['kpi_dropdown'])
            kpi_dropdown.click()
            print("‚úÖ Step 3a: Clicked KPI dropdown")

            print(f"   Selecting '{self.config['selectors']['dhtc_option_text']}'...")
            try:
                kpi_dropdown.select_option(label=self.config['selectors']['dhtc_option_text'])
                print("‚úÖ Step 3b: Selected DHTC option using label")
            except Exception as e:
                print(f"   Method 1 failed: {e}")
                try:
                    option_text = self.config['selectors']['dhtc_option_text']
                    dhtc_option = self.get_locator(page, f'//option[contains(text(), "{option_text}")]')
                    dhtc_option.click()
                    print("‚úÖ Step 3b: Selected DHTC option using text search")
                except Exception as e2:
                    print(f"   Method 2 failed: {e2}")
                    try:
                        dhtc_option = self.get_locator(page, '//option[contains(text(), "DHTC")]')
                        dhtc_option.click()
                        print("‚úÖ Step 3b: Selected DHTC option using partial text")
                    except Exception as e3:
                        print(f"   All methods failed: {e3}")
                        return False

            selected_text = kpi_dropdown.locator('option:checked').inner_text()
            expected_text = self.config['selectors']['dhtc_option_text']
            if expected_text in selected_text or "DHTC" in selected_text:
                print(f"‚úÖ Step 3c: Confirmed DHTC option is selected: {selected_text}")
                print("üîç Step 4: Looking for Search button...")
                search_success = self.click_search_and_download(page)
                if search_success:
                    print("‚úÖ Step 4: Search and download completed successfully!")
                    return True
                else:
                    print("‚ùå Step 4: Search and download failed!")
                    return False
            else:
                print(f"‚ùå Step 3c: Wrong option selected. Current text: {selected_text}")
                return False
        except PlaywrightTimeoutError:
            print("‚ùå Step 3 failed: KPI dropdown not found")
            return False
        except Exception as e:
            print(f"‚ùå KPI selection error: {e}")
            return False

    def select_month_year_before_search(self, page):
        """
        Ch·ªçn th√°ng/nƒÉm tr∆∞·ªõc khi click search
        Ch·ªçn ng√†y hi·ªán t·∫°i l√πi 1 ng√†y ƒë·ªÉ x√°c ƒë·ªãnh th√°ng/nƒÉm
        """
        try:
            from datetime import datetime, timedelta
            
            # T√≠nh ng√†y hi·ªán t·∫°i l√πi 1 ng√†y
            yesterday = datetime.now() - timedelta(days=1)
            target_year = yesterday.year
            target_month = yesterday.month
            
            print(f"   üìÖ Ch·ªçn th√°ng/nƒÉm: {target_month}/{target_year}")
            
            # B∆∞·ªõc 1: Click v√†o field fromMonth ƒë·ªÉ m·ªü month/year picker
            from_month_field = self.get_locator(page, self.config['selectors']['from_month_field'])
            from_month_field.click()
            page.wait_for_timeout(1000)  # ƒê·ª£i picker hi·ªán l√™n
            
            # B∆∞·ªõc 2: Ch·ªçn nƒÉm
            year_selector = self.get_locator(page, self.config['selectors']['month_year_picker_year'])
            year_selector.select_option(value=str(target_year))
            print(f"   ‚úÖ ƒê√£ ch·ªçn nƒÉm: {target_year}")
            page.wait_for_timeout(500)
            
            # B∆∞·ªõc 3: Ch·ªçn th√°ng
            month_selector_template = self.config['selectors']['month_year_picker_month']
            month_selector = month_selector_template.format(month=target_month)
            month_element = self.get_locator(page, month_selector)
            month_element.click()
            print(f"   ‚úÖ ƒê√£ ch·ªçn th√°ng: T{target_month}")
            page.wait_for_timeout(1000)
            
            return True
            
        except Exception as e:
            print(f"   ‚ùå L·ªói ch·ªçn th√°ng/nƒÉm: {str(e)}")
            return False

    def click_search_and_download(self, page, custom_filename=None):
        """
        Click n√∫t Search v√† x·ª≠ l√Ω download file v·ªõi retry logic
        N·∫øu custom_filename ƒë∆∞·ª£c truy·ªÅn v√†o th√¨ ƒë·∫∑t t√™n file t·∫£i v·ªÅ theo t√™n n√†y
        """
        max_retries = 3
        for attempt in range(1, max_retries + 1):
            try:
                # B∆∞·ªõc m·ªõi: Ch·ªçn th√°ng/nƒÉm tr∆∞·ªõc khi search
                month_year_success = self.select_month_year_before_search(page)
                if not month_year_success:
                    print(f"   ‚ùå Kh√¥ng th·ªÉ ch·ªçn th√°ng/nƒÉm, th·ª≠ l·∫°i l·∫ßn {attempt}")
                    if attempt < max_retries:
                        if self.retry_navigation_from_menu(page):
                            continue
                    return False
                
                search_button = self.get_locator(page, self.config['selectors']['search_button'])
                if custom_filename:
                    download_path = self.daily_output_dir / f"{custom_filename}.xlsx"
                else:
                    download_path = self.daily_output_dir / f"report_{int(time.time())}.xlsx"
                with page.expect_download(timeout=180000) as download_info:
                    search_button.click()
                download = download_info.value
                download.save_as(str(download_path))
                if download_path.exists() and download_path.stat().st_size > 0:
                    return True
                else:
                    if attempt < max_retries:
                        if self.retry_navigation_from_menu(page):
                            continue
                    print(f"‚ùå T·∫£i th·∫•t b·∫°i: {custom_filename or download_path.name}")
                    return False
            except Exception as e:
                if attempt < max_retries:
                    if self.retry_navigation_from_menu(page):
                        continue
                else:
                    print(f"‚ùå T·∫£i th·∫•t b·∫°i: {custom_filename or 'Unknown'} - L·ªói: {str(e)}")
                    return False
        return False
    
    def retry_navigation_from_menu(self, page):
        """
        Th·ª±c hi·ªán l·∫°i navigation t·ª´ menu #638 khi retry
        """
        try:
            timeout = self.config['settings']['wait_timeout']
            
            # Refresh page v√† ƒë·ª£i load
            page.reload()
            page.wait_for_load_state('networkidle')
            page.wait_for_timeout(3000)
            
            # Click menu #638
            menu_item_638 = self.get_locator(page, self.config['selectors']['menu_638'])
            menu_item_638.wait_for(state='visible', timeout=timeout)
            menu_item_638.click()
            
            page.wait_for_load_state('networkidle')
            page.wait_for_timeout(2000)
            
            # Click DMS_REPORT_KPI
            dms_report_kpi = self.get_locator(page, self.config['selectors']['dms_report_kpi'])
            dms_report_kpi.wait_for(state='visible', timeout=timeout)
            dms_report_kpi.click()
            
            page.wait_for_timeout(1000)
            
            # Click RPT_KPI_STAFF
            rpt_kpi_staff = self.get_locator(page, self.config['selectors']['rpt_kpi_staff'])
            rpt_kpi_staff.wait_for(state='visible', timeout=timeout)
            rpt_kpi_staff.click()
            
            page.wait_for_load_state('networkidle')
            page.wait_for_timeout(2000)
            
            # B·ªè vi·ªác ch·ªçn KPI dropdown ·ªü ƒë√¢y v√¨ s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω trong select_kpi_and_download
            
            return True
            
        except Exception as e:
            return False

    def smart_wait_for_element(self, locator, state='visible'):
        """
        Smart waiting strategy - s·ª≠ d·ª•ng auto wait ho·∫∑c custom timeout
        """
        settings = self.config.get('settings', {})
        auto_wait = settings.get('auto_wait', True)
        fast_mode = settings.get('fast_mode', False)
        
        if auto_wait:
            # S·ª≠ d·ª•ng Playwright default timeout (30s) - nhanh v√† th√¥ng minh
            if fast_mode:
                # Fast mode: timeout ng·∫Øn h∆°n
                locator.wait_for(state=state, timeout=5000)  # 5 gi√¢y
            else:
                # Normal mode: d√πng default c·ªßa Playwright
                locator.wait_for(state=state)  # 30 gi√¢y default
        else:
            # Custom timeout t·ª´ config
            timeout = settings.get('wait_timeout', 30000)
            locator.wait_for(state=state, timeout=timeout)

    def get_locator(self, page, selector):
        """
        T·∫°o locator t·ª´ selector (h·ªó tr·ª£ CSS v√† XPath)
        """
        if selector.startswith('/'):
            # XPath selector
            return page.locator(f"xpath={selector}")
        else:
            # CSS selector
            return page.locator(selector)

    def setup_daily_output_directory(self):
        """
        T·∫°o th∆∞ m·ª•c output theo ng√†y hi·ªán t·∫°i (format: DDMMYYYY)
        N·∫øu ƒë√£ t·ªìn t·∫°i th√¨ x√≥a v√† t·∫°o l·∫°i ƒë·ªÉ ƒë·∫£m b·∫£o d·ªØ li·ªáu m·ªõi nh·∫•t
        """
        today = datetime.now().strftime("%d%m%Y")
        daily_dir = self.output_dir / today
        
        if daily_dir.exists():
            shutil.rmtree(daily_dir)
        
        daily_dir.mkdir(parents=True, exist_ok=True)
        
        return daily_dir

    def process_downloaded_excel_files(self):
        """
        X·ª≠ l√Ω t·∫•t c·∫£ c√°c file Excel ƒë√£ t·∫£i v·ªÅ trong th∆∞ m·ª•c ng√†y hi·ªán t·∫°i
        """
        # Ch·ªâ x·ª≠ l√Ω file trong th∆∞ m·ª•c ng√†y hi·ªán t·∫°i
        excel_files = list(self.daily_output_dir.glob("*.xlsx"))
        
        if not excel_files:
            print("‚ùå Kh√¥ng t√¨m th·∫•y file Excel n√†o ƒë·ªÉ x·ª≠ l√Ω!")
            return False
        
        processed_count = 0
        processed_files = []  # L∆∞u danh s√°ch file ƒë√£ x·ª≠ l√Ω ƒë·ªÉ g·ªôp
        
        for excel_file in excel_files:
            try:
                # X·ª≠ l√Ω n√¢ng cao v·ªõi filtering
                processed_ws = self.process_excel_with_advanced_filtering_return_sheet(excel_file)
                if processed_ws:
                    processed_files.append((excel_file, processed_ws))
                    processed_count += 1
                else:
                    print(f"‚ùå X·ª≠ l√Ω th·∫•t b·∫°i: {excel_file.name}")
            except Exception as e:
                print(f"‚ùå X·ª≠ l√Ω th·∫•t b·∫°i: {excel_file.name} - L·ªói: {str(e)}")
        
        # T·∫°o file k·∫øt qu·∫£ g·ªôp
        if processed_files:
            result_file = self.create_consolidated_result_file(processed_files)
            if result_file:
                print("üéâ Ho√†n th√†nh t·∫°o file: K·∫øt qu·∫£.xlsx")
                return True
        else:
            print("‚ùå Kh√¥ng c√≥ file n√†o ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng!")
        
        return processed_count > 0
    
    def process_single_excel_file(self, excel_file):
        """
        X·ª≠ l√Ω m·ªôt file Excel c·ª• th·ªÉ theo quy tr√¨nh:
        1. Gi·ªØ nguy√™n 5 d√≤ng ti√™u ƒë·ªÅ
        2. L·ªçc c·ªôt C (b·ªè blanks), c·ªôt D (ch·ªâ blanks)
        3. ·∫®n c·ªôt A-F v√† M
        """
        try:
            # M·ªü file Excel
            wb = openpyxl.load_workbook(excel_file)
            
            # L·∫•y th√¥ng tin c∆° b·∫£n
            sheet_names = wb.sheetnames
            print(f"   üìÑ Sheets: {sheet_names}")
            
            # X·ª≠ l√Ω sheet ƒë·∫ßu ti√™n
            ws = wb.active
            
            # ƒê·∫øm s·ªë d√≤ng c√≥ d·ªØ li·ªáu
            row_count = ws.max_row
            col_count = ws.max_column
            print(f"   üìä K√≠ch th∆∞·ªõc: {row_count} d√≤ng √ó {col_count} c·ªôt")
            
            # L·∫•y header (d√≤ng ƒë·∫ßu ti√™n)
            if row_count > 0:
                header_row = next(ws.iter_rows(min_row=1, max_row=1, values_only=True))
                headers = [str(cell) if cell is not None else "" for cell in header_row]
                print(f"   üìã Headers: {headers[:5]}...")  # Hi·ªÉn th·ªã 5 c·ªôt ƒë·∫ßu
            
            # B∆∞·ªõc 1: √Åp d·ª•ng auto filter cho to√†n b·ªô d·ªØ li·ªáu
            if row_count > 5:  # Ch·ªâ √°p d·ª•ng n·∫øu c√≥ d·ªØ li·ªáu ngo√†i 5 d√≤ng ti√™u ƒë·ªÅ
                data_range = f"A6:{openpyxl.utils.get_column_letter(col_count)}{row_count}"
                ws.auto_filter.ref = data_range
                print(f"   ÔøΩ √Åp d·ª•ng auto filter cho range: {data_range}")
                
                # B∆∞·ªõc 2: T·∫°o filter cho c·ªôt C (b·ªè blanks)
                # Filter c·ªôt C: ch·ªâ hi·ªÉn th·ªã c√°c √¥ c√≥ d·ªØ li·ªáu
                col_c_filter = openpyxl.worksheet.filters.FilterColumn(colId=2)  # C·ªôt C (index 2)
                col_c_filter.filters = openpyxl.worksheet.filters.Filters()
                # Th√™m filter ƒë·ªÉ lo·∫°i b·ªè blank values
                blank_filter = openpyxl.worksheet.filters.Filter(val="")
                col_c_filter.filters.filter.append(blank_filter)
                ws.auto_filter.filterColumn.append(col_c_filter)
                
                # B∆∞·ªõc 3: T·∫°o filter cho c·ªôt D (ch·ªâ blanks)
                col_d_filter = openpyxl.worksheet.filters.FilterColumn(colId=3)  # C·ªôt D (index 3)
                col_d_filter.filters = openpyxl.worksheet.filters.Filters()
                # Ch·ªâ hi·ªÉn th·ªã blank values
                blank_only_filter = openpyxl.worksheet.filters.Filter(val="", blank=True)
                col_d_filter.filters.filter.append(blank_only_filter)
                ws.auto_filter.filterColumn.append(col_d_filter)
                
                print(f"   ‚úÖ ƒê√£ √°p d·ª•ng filter: C·ªôt C (b·ªè blanks), C·ªôt D (ch·ªâ blanks)")
            
            # B∆∞·ªõc 4: ·∫®n c√°c c·ªôt A-F, M-N v√† t·ª´ S tr·ªü ƒëi
            columns_to_hide = ['A', 'B', 'C', 'D', 'E', 'F', 'M', 'N']
            
            # Th√™m c√°c c·ªôt t·ª´ S tr·ªü ƒëi v√†o danh s√°ch ·∫©n
            for col_num in range(19, col_count + 1):  # S = 19, T = 20, ...
                col_letter = openpyxl.utils.get_column_letter(col_num)
                columns_to_hide.append(col_letter)
            
            # ·∫®n c√°c c·ªôt
            for col_letter in columns_to_hide:
                ws.column_dimensions[col_letter].hidden = True
            
            print(f"   üôà ƒê√£ ·∫©n {len(columns_to_hide)} c·ªôt: A-F, M-N, S tr·ªü ƒëi")
            
            # B∆∞·ªõc 5: Hi·ªÉn th·ªã v√† format c√°c c·ªôt c√≤n l·∫°i (G-L, O-R)
            visible_columns = []
            for col_num in range(1, col_count + 1):
                col_letter = openpyxl.utils.get_column_letter(col_num)
                if col_letter not in columns_to_hide:
                    ws.column_dimensions[col_letter].hidden = False
                    visible_columns.append(col_letter)
            
            print(f"   üëÅÔ∏è C√°c c·ªôt hi·ªÉn th·ªã: {', '.join(visible_columns)}")
            
            # B∆∞·ªõc 6: B·ªè thu·ªôc t√≠nh wrap text t·ª´ d√≤ng 6 tr·ªü ƒëi
            print(f"   üìù B·ªè wrap text t·ª´ d√≤ng 6-{row_count}...")
            for row_num in range(6, row_count + 1):
                for col_num in range(1, col_count + 1):
                    cell = ws.cell(row_num, col_num)
                    if cell.alignment and cell.alignment.wrap_text:
                        from openpyxl.styles import Alignment
                        cell.alignment = Alignment(wrap_text=False)
            
            # B∆∞·ªõc 7: T·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh ƒë·ªô r·ªông c·ªôt
            print(f"   üìè T·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh ƒë·ªô r·ªông c·ªôt...")
            for col_letter in visible_columns:
                col_num = openpyxl.utils.column_index_from_string(col_letter)
                max_length = 0
                
                # T√¨m ƒë·ªô d√†i t·ªëi ƒëa c·ªßa n·ªôi dung trong c·ªôt
                for row_num in range(1, row_count + 1):
                    cell_value = ws.cell(row_num, col_num).value
                    if cell_value:
                        cell_length = len(str(cell_value))
                        if cell_length > max_length:
                            max_length = cell_length
                
                # ƒê·∫∑t ƒë·ªô r·ªông c·ªôt (t·ªëi thi·ªÉu 8, t·ªëi ƒëa 50)
                adjusted_width = min(max(max_length + 2, 8), 50)
                ws.column_dimensions[col_letter].width = adjusted_width
            
            print(f"   ‚úÖ ƒê√£ ƒëi·ªÅu ch·ªânh ƒë·ªô r·ªông cho {len(visible_columns)} c·ªôt hi·ªÉn th·ªã")
            
            # T·∫°o file processed
            processed_file = excel_file.parent / f"processed_{excel_file.name}"
            wb.save(processed_file)
            print(f"   üíæ L∆∞u file ƒë√£ x·ª≠ l√Ω: {processed_file.name}")
            
            # T·∫°o file t√≥m t·∫Øt
            summary_file = excel_file.parent / f"summary_{excel_file.stem}.txt"
            with open(summary_file, 'w', encoding='utf-8') as f:
                f.write(f"üìä PROCESSING SUMMARY FOR {excel_file.name}\n")
                f.write(f"{'='*50}\n")
                f.write(f"Original File: {excel_file.name}\n")
                f.write(f"Processed File: processed_{excel_file.name}\n")
                f.write(f"File Size: {excel_file.stat().st_size:,} bytes\n")
                f.write(f"Sheets: {len(sheet_names)}\n")
                f.write(f"Sheet Names: {', '.join(sheet_names)}\n")
                f.write(f"Dimensions: {row_count} rows √ó {col_count} columns\n")
                f.write(f"Title Rows: 1-5 (preserved)\n")
                f.write(f"Data Rows: 6-{row_count}\n")
                f.write(f"Filter Applied: Column C (non-blanks), Column D (blanks only)\n")
                f.write(f"Hidden Columns: {', '.join(columns_to_hide)}\n")
                f.write(f"Visible Columns: {', '.join(visible_columns)}\n")
                f.write(f"Processed: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            
            print(f"   üìù T·∫°o file t√≥m t·∫Øt: {summary_file.name}")
            
            wb.close()
            return True
            
        except Exception as e:
            print(f"   ‚ùå L·ªói khi x·ª≠ l√Ω file: {e}")
            return False

    def analyze_excel_data(self):
        """
        Ph√¢n t√≠ch chi ti·∫øt d·ªØ li·ªáu trong c√°c file Excel ƒë√£ t·∫£i v·ªÅ
        """
        excel_files = list(self.daily_output_dir.glob("*.xlsx"))
        
        if not excel_files:
            return False
        
        analysis_results = {}
        
        for excel_file in excel_files:
            try:
                result = self.analyze_single_excel(excel_file)
                analysis_results[excel_file.name] = result
                
            except Exception as e:
                analysis_results[excel_file.name] = {"error": str(e)}
        
        # T·∫°o b√°o c√°o t·ªïng h·ª£p
        self.create_analysis_report(analysis_results)
        
        return True
    
    def analyze_single_excel(self, excel_file):
        """
        Ph√¢n t√≠ch chi ti·∫øt m·ªôt file Excel
        """
        wb = openpyxl.load_workbook(excel_file)
        ws = wb.active
        
        analysis = {
            "file_name": excel_file.name,
            "file_size": excel_file.stat().st_size,
            "sheets": wb.sheetnames,
            "total_rows": 0,
            "total_cols": 0,
            "has_data": False,
            "headers": [],
            "sample_data": []
        }
        
        # ƒê·∫øm s·ªë d√≤ng v√† c·ªôt c√≥ d·ªØ li·ªáu
        max_row = ws.max_row
        max_col = ws.max_column
        
        # T√¨m d√≤ng cu·ªëi c√πng c√≥ d·ªØ li·ªáu th·ª±c s·ª±
        actual_max_row = 0
        for row_num in range(1, max_row + 1):
            row_data = [ws.cell(row_num, col).value for col in range(1, max_col + 1)]
            if any(cell for cell in row_data):
                actual_max_row = row_num
        
        analysis["total_rows"] = actual_max_row
        analysis["total_cols"] = max_col
        analysis["has_data"] = actual_max_row > 0
        
        if actual_max_row > 0:
            # L·∫•y headers (d√≤ng ƒë·∫ßu ti√™n)
            headers = [str(ws.cell(1, col).value) if ws.cell(1, col).value else f"Column_{col}" 
                      for col in range(1, max_col + 1)]
            analysis["headers"] = headers
            
            # L·∫•y 3 d√≤ng d·ªØ li·ªáu m·∫´u (b·ªè qua header)
            sample_rows = min(3, actual_max_row - 1)
            for row_num in range(2, 2 + sample_rows):
                row_data = [str(ws.cell(row_num, col).value) if ws.cell(row_num, col).value else "" 
                           for col in range(1, max_col + 1)]
                analysis["sample_data"].append(row_data)
        
        wb.close()
        return analysis
    
    def create_analysis_report(self, analysis_results):
        """
        T·∫°o b√°o c√°o t·ªïng h·ª£p ph√¢n t√≠ch
        """
        report_file = self.daily_output_dir / "analysis_report.txt"
        
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write("üìä EXCEL FILES ANALYSIS REPORT\n")
            f.write(f"{'='*50}\n")
            f.write(f"Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"Directory: {self.daily_output_dir}\n")
            f.write(f"Total Files: {len(analysis_results)}\n\n")
            
            for file_name, analysis in analysis_results.items():
                f.write(f"üìÑ FILE: {file_name}\n")
                f.write(f"{'-'*30}\n")
                
                if "error" in analysis:
                    f.write(f"‚ùå Error: {analysis['error']}\n")
                else:
                    f.write(f"Size: {analysis['file_size']:,} bytes\n")
                    f.write(f"Sheets: {', '.join(analysis['sheets'])}\n")
                    f.write(f"Dimensions: {analysis['total_rows']} rows √ó {analysis['total_cols']} columns\n")
                    f.write(f"Has Data: {'Yes' if analysis['has_data'] else 'No'}\n")
                    
                    if analysis['headers']:
                        f.write(f"Headers: {', '.join(analysis['headers'][:5])}...\n")
                    
                    if analysis['sample_data']:
                        f.write("Sample Data:\n")
                        for i, row in enumerate(analysis['sample_data'][:2]):
                            f.write(f"  Row {i+2}: {', '.join(row[:3])}...\n")
                
                f.write("\n")
        
        return report_file

    def process_excel_with_advanced_filtering(self, excel_file):
        """
        X·ª≠ l√Ω Excel v·ªõi filtering n√¢ng cao:
        1. Gi·ªØ nguy√™n 5 d√≤ng ti√™u ƒë·ªÅ
        2. ·∫®n c√°c d√≤ng th·ªèa m√£n ƒëi·ªÅu ki·ªán (C c√≥ d·ªØ li·ªáu v√† D tr·ªëng)
        3. ·∫®n c·ªôt A-F, M-N v√† t·ª´ S tr·ªü ƒëi
        4. B·ªè thu·ªôc t√≠nh wrap text t·ª´ d√≤ng 6 tr·ªü ƒëi
        5. T·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh ƒë·ªô r·ªông c·ªôt
        """
        try:
            wb = openpyxl.load_workbook(excel_file)
            ws = wb.active
            
            row_count = ws.max_row
            col_count = ws.max_column
            
            print(f"   üîÑ X·ª≠ l√Ω n√¢ng cao: {row_count} d√≤ng √ó {col_count} c·ªôt")
            
            # B∆∞·ªõc 1: Ph√¢n t√≠ch d·ªØ li·ªáu c·ªôt C v√† D
            rows_to_hide = []
            visible_rows = []
            
            for row_num in range(6, row_count + 1):  # B·∫Øt ƒë·∫ßu t·ª´ d√≤ng 6 (sau ti√™u ƒë·ªÅ)
                cell_c = ws.cell(row_num, 3)  # C·ªôt C
                cell_d = ws.cell(row_num, 4)  # C·ªôt D
                
                c_has_data = cell_c.value is not None and str(cell_c.value).strip() != ""
                d_is_blank = cell_d.value is None or str(cell_d.value).strip() == ""
                
                # ƒêi·ªÅu ki·ªán: ·∫®n c√°c d√≤ng c√≥ C c√≥ d·ªØ li·ªáu V√Ä D tr·ªëng
                if c_has_data and d_is_blank:
                    rows_to_hide.append(row_num)
                else:
                    visible_rows.append(row_num)
            
            print(f"   üìä Ph√¢n t√≠ch: {len(visible_rows)} d√≤ng hi·ªÉn th·ªã, {len(rows_to_hide)} d√≤ng ·∫©n (C c√≥ d·ªØ li·ªáu AND D tr·ªëng)")
            
            # B∆∞·ªõc 2: ·∫®n c√°c d√≤ng th·ªèa m√£n ƒëi·ªÅu ki·ªán
            for row_num in rows_to_hide:
                ws.row_dimensions[row_num].hidden = True
            
            # B∆∞·ªõc 3: ·∫®n c√°c c·ªôt A-F, M-N v√† t·ª´ S tr·ªü ƒëi
            columns_to_hide = ['A', 'B', 'C', 'D', 'E', 'F', 'M', 'N']
            
            # Th√™m c√°c c·ªôt t·ª´ S tr·ªü ƒëi (S=19, T=20, ...)
            for col_num in range(19, col_count + 1):  # S=19 tr·ªü ƒëi
                col_letter = openpyxl.utils.get_column_letter(col_num)
                columns_to_hide.append(col_letter)
            
            for col_letter in columns_to_hide:
                if col_letter <= openpyxl.utils.get_column_letter(col_count):
                    ws.column_dimensions[col_letter].hidden = True
            
            # B∆∞·ªõc 4: B·ªè wrap text t·ª´ d√≤ng 6 tr·ªü ƒëi
            print(f"   üìù B·ªè wrap text t·ª´ d√≤ng 6 ƒë·∫øn {row_count}...")
            for row_num in range(6, row_count + 1):
                for col_num in range(1, col_count + 1):
                    cell = ws.cell(row_num, col_num)
                    if cell.alignment and cell.alignment.wrap_text:
                        cell.alignment = openpyxl.styles.Alignment(wrap_text=False)
            
            # B∆∞·ªõc 5: T·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh ƒë·ªô r·ªông c·ªôt cho c√°c c·ªôt hi·ªÉn th·ªã
            visible_columns = []
            for col_num in range(1, col_count + 1):
                col_letter = openpyxl.utils.get_column_letter(col_num)
                if col_letter not in columns_to_hide:
                    visible_columns.append(col_letter)
            
            print(f"   üìè ƒêi·ªÅu ch·ªânh ƒë·ªô r·ªông cho {len(visible_columns)} c·ªôt hi·ªÉn th·ªã...")
            for col_letter in visible_columns:
                col_num = openpyxl.utils.column_index_from_string(col_letter)
                max_length = 0
                
                # T√¨m ƒë·ªô d√†i t·ªëi ƒëa c·ªßa n·ªôi dung trong c·ªôt
                for row_num in range(1, row_count + 1):
                    cell_value = ws.cell(row_num, col_num).value
                    if cell_value:
                        cell_length = len(str(cell_value))
                        if cell_length > max_length:
                            max_length = cell_length
                
                # ƒê·∫∑t ƒë·ªô r·ªông c·ªôt (t·ªëi thi·ªÉu 8, t·ªëi ƒëa 50)
                adjusted_width = min(max(max_length + 2, 8), 50)
                ws.column_dimensions[col_letter].width = adjusted_width
            
            print(f"   ‚úÖ ·∫®n {len(columns_to_hide)} c·ªôt, hi·ªÉn th·ªã {len(visible_columns)} c·ªôt")
            print(f"   ‚úÖ B·ªè wrap text v√† ƒëi·ªÅu ch·ªânh ƒë·ªô r·ªông c·ªôt ho√†n th√†nh")
            
            return True
            
        except Exception as e:
            print(f"   ‚ùå L·ªói x·ª≠ l√Ω n√¢ng cao: {e}")
            return False

    def process_excel_with_advanced_filtering_return_sheet(self, excel_file):
        """
        X·ª≠ l√Ω Excel v·ªõi filtering n√¢ng cao v√† tr·∫£ v·ªÅ worksheet ƒë√£ x·ª≠ l√Ω
        1. Gi·ªØ nguy√™n 5 d√≤ng ti√™u ƒë·ªÅ
        2. ·∫®n c√°c d√≤ng th·ªèa m√£n ƒëi·ªÅu ki·ªán (C c√≥ d·ªØ li·ªáu v√† D tr·ªëng)
        3. ·∫®n c·ªôt A-F, M-N v√† t·ª´ S tr·ªü ƒëi
        4. B·ªè wrap text t·ª´ d√≤ng 6 tr·ªü ƒëi
        5. T·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh ƒë·ªô r·ªông c·ªôt
        """
        try:
            wb = openpyxl.load_workbook(excel_file)
            ws = wb.active
            
            row_count = ws.max_row
            col_count = ws.max_column
            
            # B∆∞·ªõc 1: Ph√¢n t√≠ch d·ªØ li·ªáu c·ªôt C v√† D
            rows_to_hide = []
            visible_rows = []
            
            for row_num in range(6, row_count + 1):  # B·∫Øt ƒë·∫ßu t·ª´ d√≤ng 6 (sau ti√™u ƒë·ªÅ)
                cell_c = ws.cell(row_num, 3)  # C·ªôt C
                cell_d = ws.cell(row_num, 4)  # C·ªôt D
                
                c_has_data = cell_c.value is not None and str(cell_c.value).strip() != ""
                d_is_blank = cell_d.value is None or str(cell_d.value).strip() == ""
                
                # ƒêi·ªÅu ki·ªán: ·∫®n c√°c d√≤ng c√≥ C c√≥ d·ªØ li·ªáu V√Ä D tr·ªëng
                if c_has_data and d_is_blank:
                    rows_to_hide.append(row_num)
                else:
                    visible_rows.append(row_num)
            
            # B∆∞·ªõc 2: ·∫®n c√°c d√≤ng th·ªèa m√£n ƒëi·ªÅu ki·ªán
            for row_num in rows_to_hide:
                ws.row_dimensions[row_num].hidden = True
            
            # B∆∞·ªõc 3: ·∫®n c√°c c·ªôt A-F, M-N v√† t·ª´ S tr·ªü ƒëi
            columns_to_hide = ['A', 'B', 'C', 'D', 'E', 'F', 'M', 'N']
            
            # Th√™m c√°c c·ªôt t·ª´ S tr·ªü ƒëi (S=19, T=20, ...)
            for col_num in range(19, col_count + 1):  # S=19 tr·ªü ƒëi
                col_letter = openpyxl.utils.get_column_letter(col_num)
                columns_to_hide.append(col_letter)
            
            for col_letter in columns_to_hide:
                if col_letter <= openpyxl.utils.get_column_letter(col_count):
                    ws.column_dimensions[col_letter].hidden = True
            
            # B∆∞·ªõc 4: B·ªè wrap text t·ª´ d√≤ng 6 tr·ªü ƒëi
            for row_num in range(6, row_count + 1):
                for col_num in range(1, col_count + 1):
                    cell = ws.cell(row_num, col_num)
                    if cell.alignment and cell.alignment.wrap_text:
                        cell.alignment = openpyxl.styles.Alignment(wrap_text=False)
            
            # B∆∞·ªõc 5: T·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh ƒë·ªô r·ªông c·ªôt cho c√°c c·ªôt hi·ªÉn th·ªã
            visible_columns = []
            for col_num in range(1, col_count + 1):
                col_letter = openpyxl.utils.get_column_letter(col_num)
                if col_letter not in columns_to_hide:
                    visible_columns.append(col_letter)
            
            for col_letter in visible_columns:
                col_num = openpyxl.utils.column_index_from_string(col_letter)
                max_length = 0
                
                # T√¨m ƒë·ªô d√†i t·ªëi ƒëa c·ªßa n·ªôi dung trong c·ªôt
                for row_num in range(1, row_count + 1):
                    cell_value = ws.cell(row_num, col_num).value
                    if cell_value:
                        cell_length = len(str(cell_value))
                        if cell_length > max_length:
                            max_length = cell_length
                
                # ƒê·∫∑t ƒë·ªô r·ªông c·ªôt (t·ªëi thi·ªÉu 8, t·ªëi ƒëa 50)
                adjusted_width = min(max(max_length + 2, 8), 50)
                ws.column_dimensions[col_letter].width = adjusted_width
            
            return ws  # Tr·∫£ v·ªÅ worksheet ƒë√£ x·ª≠ l√Ω
            
        except Exception as e:
            return None

    def create_consolidated_result_file(self, processed_files):
        """
        T·∫°o file K·∫øt qu·∫£.xlsx g·ªôp t·∫•t c·∫£ c√°c sheet ƒë√£ x·ª≠ l√Ω
        """
        if not processed_files:
            print("‚ùå Kh√¥ng c√≥ file n√†o ƒë·ªÉ g·ªôp!")
            return False
        
        # T·∫°o workbook m·ªõi cho k·∫øt qu·∫£
        result_wb = openpyxl.Workbook()
        result_wb.remove(result_wb.active)  # X√≥a sheet m·∫∑c ƒë·ªãnh
        
        for i, (original_file, sheet_data) in enumerate(processed_files, 1):
            try:
                # T·∫°o t√™n sheet t·ª´ t√™n file g·ªëc (b·ªè .xlsx)
                sheet_name = original_file.stem
                # ƒê·∫£m b·∫£o t√™n sheet kh√¥ng qu√° d√†i (Excel gi·ªõi h·∫°n 31 k√Ω t·ª±)
                if len(sheet_name) > 31:
                    sheet_name = sheet_name[:31]
                
                # T·∫°o sheet m·ªõi
                ws_result = result_wb.create_sheet(title=sheet_name)
                
                # Copy d·ªØ li·ªáu t·ª´ sheet_data v√†o sheet m·ªõi
                self.copy_worksheet_data(sheet_data, ws_result)
                
                print(f"   ‚úÖ Th√™m Sheet {i}: {sheet_name} th√†nh c√¥ng")
                
            except Exception as e:
                print(f"   ‚ùå Th√™m Sheet {i}: {original_file.stem} th·∫•t b·∫°i")
        
        # L∆∞u file k·∫øt qu·∫£
        result_path = self.daily_output_dir / "K·∫øt qu·∫£.xlsx"
        result_wb.save(result_path)
        result_wb.close()
        
        return result_path
    
    def copy_worksheet_data(self, source_ws, target_ws):
        """
        Copy d·ªØ li·ªáu t·ª´ worksheet ngu·ªìn sang worksheet ƒë√≠ch k√®m theo formatting
        """
        # Copy t·∫•t c·∫£ d·ªØ li·ªáu v√† formatting
        for row in source_ws.iter_rows():
            for cell in row:
                target_cell = target_ws.cell(row=cell.row, column=cell.column)
                
                # Copy value
                target_cell.value = cell.value
                
                # Copy formatting n·∫øu c√≥
                if cell.has_style:
                    # Copy font
                    if cell.font:
                        target_cell.font = openpyxl.styles.Font(
                            name=cell.font.name,
                            size=cell.font.size,
                            bold=cell.font.bold,
                            italic=cell.font.italic,
                            vertAlign=cell.font.vertAlign,
                            underline=cell.font.underline,
                            strike=cell.font.strike,
                            color=cell.font.color
                        )
                    
                    # Copy fill (background color)
                    if cell.fill:
                        target_cell.fill = openpyxl.styles.PatternFill(
                            fill_type=cell.fill.fill_type,
                            start_color=cell.fill.start_color,
                            end_color=cell.fill.end_color
                        )
                    
                    # Copy border
                    if cell.border:
                        target_cell.border = openpyxl.styles.Border(
                            left=cell.border.left,
                            right=cell.border.right,
                            top=cell.border.top,
                            bottom=cell.border.bottom,
                            diagonal=cell.border.diagonal,
                            diagonal_direction=cell.border.diagonal_direction,
                            outline=cell.border.outline,
                            vertical=cell.border.vertical,
                            horizontal=cell.border.horizontal
                        )
                    
                    # Copy alignment (nh∆∞ng s·∫Ω override wrap_text sau)
                    if cell.alignment:
                        target_cell.alignment = openpyxl.styles.Alignment(
                            horizontal=cell.alignment.horizontal,
                            vertical=cell.alignment.vertical,
                            text_rotation=cell.alignment.text_rotation,
                            wrap_text=cell.alignment.wrap_text,
                            shrink_to_fit=cell.alignment.shrink_to_fit,
                            indent=cell.alignment.indent
                        )
                    
                    # Copy number format
                    if cell.number_format:
                        target_cell.number_format = cell.number_format
        
        # Copy row heights tr∆∞·ªõc khi √°p d·ª•ng hidden rows
        for row_num in range(1, source_ws.max_row + 1):
            if source_ws.row_dimensions[row_num].height:
                target_ws.row_dimensions[row_num].height = source_ws.row_dimensions[row_num].height
        
        # Copy hidden rows t·ª´ source (ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω)
        for row_num in range(1, source_ws.max_row + 1):
            if source_ws.row_dimensions[row_num].hidden:
                target_ws.row_dimensions[row_num].hidden = True
        
        # B∆∞·ªõc quan tr·ªçng: √Åp d·ª•ng l·∫°i logic ·∫©n c·ªôt v√† ƒëi·ªÅu ch·ªânh ƒë·ªô r·ªông
        col_count = source_ws.max_column
        row_count = source_ws.max_row
        
        # ·∫®n c√°c c·ªôt A-F, M-N v√† t·ª´ S tr·ªü ƒëi (√°p d·ª•ng l·∫°i logic)
        columns_to_hide = ['A', 'B', 'C', 'D', 'E', 'F', 'M', 'N']
        
        # Th√™m c√°c c·ªôt t·ª´ S tr·ªü ƒëi (S=19, T=20, U=21, ..., Z=26)
        for col_num in range(19, col_count + 1):  # S=19 tr·ªü ƒëi
            col_letter = openpyxl.utils.get_column_letter(col_num)
            columns_to_hide.append(col_letter)
        
        # ·∫®n c√°c c·ªôt - FIX: Ph·∫£i ·∫©n t·∫•t c·∫£ c·ªôt c√≥ trong danh s√°ch
        for col_letter in columns_to_hide:
            target_ws.column_dimensions[col_letter].hidden = True
        
        # B·ªè wrap text t·ª´ d√≤ng 6 tr·ªü ƒëi v√† TH√äM canh gi·ªØa theo chi·ªÅu d·ªçc
        for row_num in range(6, row_count + 1):
            for col_num in range(1, col_count + 1):
                cell = target_ws.cell(row_num, col_num)
                if cell.alignment:
                    # Gi·ªØ nguy√™n c√°c thu·ªôc t√≠nh alignment kh√°c, b·ªè wrap_text v√† TH√äM vertical center
                    target_ws.cell(row_num, col_num).alignment = openpyxl.styles.Alignment(
                        horizontal=cell.alignment.horizontal,
                        vertical='center',  # CANH GI·ªÆA THEO CHI·ªÄU D·ªåC
                        text_rotation=cell.alignment.text_rotation,
                        wrap_text=False,  # B·ªè wrap text
                        shrink_to_fit=cell.alignment.shrink_to_fit,
                        indent=cell.alignment.indent
                    )
                else:
                    # N·∫øu ch∆∞a c√≥ alignment, t·∫°o m·ªõi v·ªõi vertical center
                    target_ws.cell(row_num, col_num).alignment = openpyxl.styles.Alignment(
                        vertical='center',
                        wrap_text=False
                    )
        
        # TH√äM: Canh gi·ªØa cho t·∫•t c·∫£ c√°c merged cells (bao g·ªìm c·∫£ ti√™u ƒë·ªÅ)
        for merged_range in target_ws.merged_cells.ranges:
            # L·∫•y cell ƒë·∫ßu ti√™n c·ªßa merged range
            start_cell = target_ws.cell(merged_range.min_row, merged_range.min_col)
            start_cell.alignment = openpyxl.styles.Alignment(
                horizontal='center',  # Canh gi·ªØa ngang
                vertical='center',    # Canh gi·ªØa d·ªçc
                wrap_text=False
            )
        
        # T·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh ƒë·ªô r·ªông c·ªôt cho c√°c c·ªôt hi·ªÉn th·ªã
        visible_columns = []
        for col_num in range(1, col_count + 1):
            col_letter = openpyxl.utils.get_column_letter(col_num)
            if col_letter not in columns_to_hide:
                visible_columns.append(col_letter)
        
        # ƒêi·ªÅu ch·ªânh ƒë·ªô r·ªông c·ªôt d·ª±a tr√™n n·ªôi dung th·ª±c t·∫ø
        for col_letter in visible_columns:
            col_num = openpyxl.utils.column_index_from_string(col_letter)
            max_length = 0
            
            # T√¨m ƒë·ªô d√†i t·ªëi ƒëa c·ªßa n·ªôi dung trong c·ªôt (ch·ªâ t√≠nh c√°c d√≤ng hi·ªÉn th·ªã)
            for row_num in range(1, row_count + 1):
                # B·ªè qua c√°c d√≤ng b·ªã ·∫©n
                if target_ws.row_dimensions[row_num].hidden:
                    continue
                    
                cell_value = target_ws.cell(row_num, col_num).value
                if cell_value:
                    # T√≠nh ƒë·ªô d√†i hi·ªÉn th·ªã th·ª±c t·∫ø (c√≥ th·ªÉ c√≥ font size kh√°c nhau)
                    display_length = len(str(cell_value))
                    
                    # ƒêi·ªÅu ch·ªânh theo font size n·∫øu c√≥
                    cell = target_ws.cell(row_num, col_num)
                    if cell.font and cell.font.size:
                        # Font size l·ªõn h∆°n th√¨ c·∫ßn width l·ªõn h∆°n
                        size_factor = cell.font.size / 11  # 11 l√† font size chu·∫©n
                        display_length = int(display_length * size_factor)
                    
                    if display_length > max_length:
                        max_length = display_length
            
            # ƒê·∫∑t ƒë·ªô r·ªông c·ªôt (t·ªëi thi·ªÉu 8, t·ªëi ƒëa 40, v√† th√™m padding v·ª´a ph·∫£i)
            if max_length == 0:
                adjusted_width = 10  # Default width cho c·ªôt tr·ªëng
            else:
                # T√≠nh width t·ªëi ∆∞u: n·ªôi dung + padding nh·ªè
                adjusted_width = min(max(max_length + 1, 8), 40)  # Gi·∫£m padding t·ª´ +2 xu·ªëng +1
            
            target_ws.column_dimensions[col_letter].width = adjusted_width
        
        # Copy merged cells
        for merged_range in source_ws.merged_cells.ranges:
            target_ws.merge_cells(str(merged_range))

def main():
    """
    H√†m main ch·∫°y ch∆∞∆°ng tr√¨nh
    """
    # Kh·ªüi t·∫°o OrderChecker
    checker = OrderChecker()
    
    # Ki·ªÉm tra config tr∆∞·ªõc khi ch·∫°y
    if not checker.config:
        print("‚ùå Config kh√¥ng h·ª£p l·ªá!")
        return
    
    # Ch·∫°y automation v·ªõi th√¥ng tin t·ª´ config
    success = checker.run_browser_test()
    
    print("\n" + "‚îÄ" * 60)
    if success:
        print("üéâ HO√ÄN TH√ÄNH T·∫§T C·∫¢!")
    else:
        print("‚ùå TH·∫§T B·∫†I!")
    print("‚îÄ" * 60)

if __name__ == "__main__":
    main()