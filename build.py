"""
Script ƒë·ªÉ ƒë√≥ng g√≥i d·ª± √°n Order Checker v2.0 th√†nh th∆∞ m·ª•c
T·∫•t c·∫£ build ƒë·ªÅu t·∫°o th∆∞ m·ª•c ƒë·ªÉ ch·∫°y nhanh, kh√¥ng c·∫ßn gi·∫£i n√©n
"""
import os
import subprocess
import sys
from pathlib import Path

def build_menu_exe():
    """
    ƒê√≥ng g√≥i menu.py th√†nh th∆∞ m·ª•c (recommended - ch·∫°y nhanh, kh√¥ng c·∫ßn gi·∫£i n√©n)
    """
    project_dir = Path(__file__).parent
    
    print("üéõÔ∏è Building Order Checker Menu v2.0 directory...")
    
    # Command PyInstaller cho menu - build th√†nh th∆∞ m·ª•c
    cmd = [
        sys.executable, "-m", "PyInstaller",
        "--onedir",                     # T·∫°o th∆∞ m·ª•c thay v√¨ 1 file
        "--name=OrderChecker-Menu",     # T√™n th∆∞ m·ª•c
        "--icon=icon.ico",              # Icon (n·∫øu c√≥)
        "--add-data=chromium-browser;chromium-browser",  # Include chromium
        "--add-data=input;input",       # Include input folder
        "--add-data=output;output",     # Include output folder
        "--add-data=check_oder.py;.",   # Include check_oder.py
        "--add-data=process_excel.py;.", # Include process_excel.py
        "--add-data=test_system.py;.",  # Include test_system.py
        "--add-data=HUONG_DAN.md;.",    # Include h∆∞·ªõng d·∫´n
        "--hidden-import=process_excel", # Import process_excel
        "--hidden-import=check_oder",   # Import check_oder
        "--clean",                      # Clean cache
        "-y",                          # Overwrite without confirmation
        "menu.py"                      # File menu ch√≠nh
    ]
    
    # N·∫øu kh√¥ng c√≥ icon th√¨ b·ªè qua
    if not (project_dir / "icon.ico").exists():
        cmd = [item for item in cmd if not item.startswith("--icon")]
    
    print(f"üì¶ Running: {' '.join(cmd)}")
    
    try:
        result = subprocess.run(cmd, cwd=project_dir, capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ Menu build successful!")
            print(f"üìÅ Directory created at: {project_dir}/dist/OrderChecker-Menu/")
            print(f"üöÄ Run: {project_dir}/dist/OrderChecker-Menu/OrderChecker-Menu.exe")
            
            # Hi·ªÉn th·ªã th√¥ng tin th∆∞ m·ª•c
            exe_path = project_dir / "dist" / "OrderChecker-Menu" / "OrderChecker-Menu.exe"
            if exe_path.exists():
                size_mb = exe_path.stat().st_size / (1024 * 1024)
                print(f"üìä Main executable size: {size_mb:.1f} MB")
        else:
            print("‚ùå Build failed!")
            print("Error:", result.stderr)
            
    except Exception as e:
        print(f"‚ùå Error: {e}")

def build_exe():
    """
    ƒê√≥ng g√≥i check_oder.py th√†nh th∆∞ m·ª•c (ch·∫°y nhanh, kh√¥ng c·∫ßn gi·∫£i n√©n)
    """
    project_dir = Path(__file__).parent
    
    print("üöÄ Building Order Checker v2.0 directory...")
    
    # Command PyInstaller - build th√†nh th∆∞ m·ª•c
    cmd = [
        sys.executable, "-m", "PyInstaller",
        "--onedir",                     # T·∫°o th∆∞ m·ª•c thay v√¨ 1 file
        "--name=OrderChecker",          # T√™n th∆∞ m·ª•c
        "--icon=icon.ico",              # Icon (n·∫øu c√≥)
        "--add-data=chromium-browser;chromium-browser",  # Include chromium
        "--add-data=input;input",       # Include input folder
        "--add-data=output;output",     # Include output folder
        "--add-data=process_excel.py;.", # Include process_excel.py
        "--add-data=menu.py;.",         # Include menu.py
        "--add-data=test_system.py;.",  # Include test_system.py
        "--add-data=HUONG_DAN.md;.",    # Include h∆∞·ªõng d·∫´n
        "--hidden-import=process_excel", # Import process_excel
        "--clean",                      # Clean cache
        "-y",                          # Overwrite without confirmation
        "check_oder.py"                 # File ch√≠nh
    ]
    
    # N·∫øu kh√¥ng c√≥ icon th√¨ b·ªè qua
    if not (project_dir / "icon.ico").exists():
        cmd = [item for item in cmd if not item.startswith("--icon")]
    
    print(f"üì¶ Running: {' '.join(cmd)}")
    
    try:
        result = subprocess.run(cmd, cwd=project_dir, capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ Build successful!")
            print(f"üìÅ Directory created at: {project_dir}/dist/OrderChecker/")
            print(f"üöÄ Run: {project_dir}/dist/OrderChecker/OrderChecker.exe")
            
            # Hi·ªÉn th·ªã th√¥ng tin th∆∞ m·ª•c
            exe_path = project_dir / "dist" / "OrderChecker" / "OrderChecker.exe"
            if exe_path.exists():
                size_mb = exe_path.stat().st_size / (1024 * 1024)
                print(f"üìä Main executable size: {size_mb:.1f} MB")
        else:
            print("‚ùå Build failed!")
            print("STDOUT:", result.stdout)
            print("STDERR:", result.stderr)
            
    except Exception as e:
        print(f"‚ùå Error: {e}")

def build_dir():
    """
    ƒê√≥ng g√≥i d·ª± √°n th√†nh th∆∞ m·ª•c v·ªõi t·ªëi ∆∞u t·ªëc ƒë·ªô v√† k√≠ch th∆∞·ªõc
    """
    project_dir = Path(__file__).parent
    
    print("ÔøΩ Building Order Checker optimized directory...")
    
    # Command PyInstaller v·ªõi t·ªëi ∆∞u
    cmd = [
        sys.executable, "-m", "PyInstaller",
        "--onedir",                     # T·∫°o th∆∞ m·ª•c
        "--name=OrderChecker-Optimized", # T√™n th∆∞ m·ª•c
        "--add-data=chromium-browser;chromium-browser",  # Include chromium
        "--add-data=input;input",       # Include input folder  
        "--add-data=output;output",     # Include output folder
        "--add-data=process_excel.py;.", # Include process_excel.py
        "--add-data=menu.py;.",         # Include menu.py
        "--add-data=test_system.py;.",  # Include test_system.py
        "--add-data=HUONG_DAN.md;.",    # Include h∆∞·ªõng d·∫´n
        "--hidden-import=process_excel", # Import process_excel
        "--exclude-module=tkinter",     # Lo·∫°i b·ªè tkinter kh√¥ng c·∫ßn
        "--exclude-module=matplotlib",  # Lo·∫°i b·ªè matplotlib kh√¥ng c·∫ßn
        "--clean",                      # Clean cache
        "-y",                          # Overwrite without confirmation
        "check_oder.py"                 # File ch√≠nh
    ]
    
    print(f"üì¶ Running: {' '.join(cmd)}")
    
    try:
        result = subprocess.run(cmd, cwd=project_dir, capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ Build successful!")
            print(f"üìÅ Optimized directory created at: {project_dir}/dist/OrderChecker-Optimized/")
            print(f"üöÄ Run: {project_dir}/dist/OrderChecker-Optimized/OrderChecker-Optimized.exe")
            
            # Hi·ªÉn th·ªã th√¥ng tin th∆∞ m·ª•c
            exe_path = project_dir / "dist" / "OrderChecker-Optimized" / "OrderChecker-Optimized.exe"
            if exe_path.exists():
                size_mb = exe_path.stat().st_size / (1024 * 1024)
                print(f"üìä Main executable size: {size_mb:.1f} MB")
        else:
            print("‚ùå Build failed!")
            print("STDOUT:", result.stdout)
            print("STDERR:", result.stderr)
            
    except Exception as e:
        print(f"‚ùå Error: {e}")

def main():
    print("=" * 60)
    print("üì¶ ORDER CHECKER v2.0 - BUILD DIRECTORIES")
    print("=" * 60)
    
    print("Choose what to build (all create directories for fast startup):")
    print("1. üéõÔ∏è Menu directory (RECOMMENDED - OrderChecker-Menu/)")
    print("2. üöÄ Direct directory (OrderChecker/)")
    print("3. üìÅ Optimized directory (OrderChecker-Optimized/)")
    print("0. ‚ùå Exit")
    
    choice = input("\nEnter choice (1-3): ").strip()
    
    if choice == "1":
        build_menu_exe()
    elif choice == "2":
        build_exe()
    elif choice == "3":
        build_dir()
    elif choice == "0":
        print("üëã Goodbye!")
    else:
        print("‚ùå Invalid choice!")

if __name__ == "__main__":
    main()
